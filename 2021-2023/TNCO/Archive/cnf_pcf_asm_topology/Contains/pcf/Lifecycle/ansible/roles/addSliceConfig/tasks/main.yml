# convert ALM properties to json provide request for South Bound endpoint
- name: Create the list
  set_fact:
    list_pcf_qosData_Id: "{{ pcf_qosData_Id.split(',') | map('trim') |  list }}"
    list_pcf_qosData_Name: "{{ pcf_qosData_Name.split(',') | map('trim') | list }}"
    list_pcf_qosData_5Qi: "{{ pcf_qosData_5Qi.split(',')| map('trim') | list }}"
    list_pcf_qosData_MaxBrUl: "{{ pcf_qosData_MaxBrUl.split(',')| map('trim') | list }}"
    list_pcf_qosData_MaxBrDl: "{{ pcf_qosData_MaxBrDl.split(',')| map('trim') | list }}"
    list_pcf_qosData_GbrUl: "{{ pcf_qosData_GbrUl.split(',')| map('trim') | list }}"
    list_pcf_qosData_GbrDl: "{{ pcf_qosData_GbrDl.split(',')| map('trim') | list }}"
    list_pcf_qosData_Qnc: "{{ pcf_qosData_Qnc.split(',') | map('trim')| list }}"
    list_pcf_qosData_ReflectiveQoS: "{{ pcf_qosData_ReflectiveQoS.split(',') | map('trim')| list }}"
    list_pcf_qosData_PriorityLevel: "{{ pcf_qosData_PriorityLevel.split(',') | map('trim')| list }}"
    list_pcf_qosData_DefQoSFlowInd: "{{ pcf_qosData_DefQoSFlowInd.split(',') | map('trim')| list }}"
    list_pcf_qosData_ArpPriority: "{{ pcf_qosData_ArpPriority.split(',') | map('trim')| list }}"
    list_pcf_qosData_ArpPreemptCap: "{{ pcf_qosData_ArpPreemptCap.split(',') | map('trim')| list }}"
    list_pcf_qosData_ArpPreemptVuln: "{{ pcf_qosData_ArpPreemptVuln.split(',') | map('trim')| list }}"
    list_pcf_pccRule_Id: "{{ pcf_pccRule_Id.split(',') | map('trim')| list }}"
    list_pcf_pccRule_Name: "{{ pcf_pccRule_Name.split(',') | map('trim')| list }}"
    list_pcf_pccRule_Type: "{{ pcf_pccRule_Type.split(',') | map('trim')| list }}"
    list_pcf_pccRule_DLFlowName: "{{ pcf_pccRule_DLFlowName.split(',') | map('trim')| list }}"
    list_pcf_pccRule_DLFlowDirection: "{{ pcf_pccRule_DLFlowDirection.split(',') | map('trim')| list }}"
    list_pcf_pccRule_DLFlowDesc: "{{ pcf_pccRule_DLFlowDesc.split(',') | map('trim')| list }}"
    list_pcf_pccRule_ULFlowName: "{{ pcf_pccRule_ULFlowName.split(',') | map('trim')| list }}"
    list_pcf_pccRule_ULFlowDirection: "{{ pcf_pccRule_ULFlowDirection.split(',')| map('trim') | list }}"
    list_pcf_pccRule_ULFlowDesc: "{{ pcf_pccRule_ULFlowDesc.split(',') | map('trim')| list }}"
    list_pcf_pccRule_precedence: "{{ pcf_pccRule_precedence.split(',') | map('trim')| list }}"
    list_pcf_pccRule_refQoSData:  "{{ pcf_pccRule_refQoSData.split(',') | map('trim')| list }}"
    list_pcf_qosInfo_Id: "{{ pcf_qosInfo_Id.split(',') | map('trim')| list }}"
    list_pcf_qosInfo_name: "{{ pcf_qosInfo_name.split(',') | map('trim')| list }}"
    list_pcf_qosInfo_desc:   "{{ pcf_qosInfo_desc.split(',') | map('trim')| list }}"
    list_pcf_qosInfo_5Qi:  "{{ pcf_qosInfo_5Qi.split(',') | map('trim')| list }}"
    list_pcf_qosInfo_priorityLevel:  "{{ pcf_qosInfo_priorityLevel.split(',') | map('trim')| list }}"
    list_pcf_qosInfo_preemptCap:   "{{ pcf_qosInfo_preemptCap.split(',') | map('trim')| list }}"
    list_pcf_qosInfo_preemptVuln:  "{{ pcf_qosInfo_preemptVuln.split(',') | map('trim')| list }}"
    list_pcf_sessionRule_Id: "{{ pcf_sessionRule_Id.split(',') | map('trim')| list }}"
    list_pcf_sessionRule_Name: "{{ pcf_sessionRule_Name.split(',') | map('trim')| list }}"
    list_pcf_sessionRule_Ambr_Ul: "{{ pcf_sessionRule_Ambr_Ul.split(',') | map('trim')| list }}"
    list_pcf_sessionRule_Ambr_Dl: "{{ pcf_sessionRule_Ambr_Dl.split(',') | map('trim')| list }}"
    list_pcf_sessionRule_QosId: "{{ pcf_sessionRule_QosId.split(',') | map('trim')| list }}"
     
- name: generate new file
  copy: 
    dest: "/tmp/{{ instance_name }}.json.j2"
    content: |
       {
         "afChargingIdentifier": "{{ pcf_chgData_afChargingIdentifier }}"
         "appSvcProvId":  "{{ pcf_chgData_appSvcProvId }}",
          "chgId": "{{ pcf_chgData_chgId }}",
          "meteringMethod": "{{ pcf_chgData_meteringMethod }}",
          "name": "{{ pcf_chgData_profileName }}",
          "offline": "{{ pcf_chgData_offline }}",
          "online": "{{ pcf_chgData_online }}",
          "ratingGroup": "{{ pcf_chgData_ratingGroup }}",
           "reportingLevel": "{{ pcf_chgData_reportingLevel }}",
           "sdfHandl": "{{ pcf_chgData_sdfHand }}",
           "servicexId": "{{ pcf_chgData_serviceId }}",
           "sponsorId": "{{ pcf_chgData_sponsorId }}"
         }

- name:  create Qos data
  copy: 
    dest: "/tmp/{{ item.0 }}_Qos_data.json.j2"
    content: |
       {
        "qosId": "{{ item.0 }}",
        "name": "{{ item.1 }}",
        "5qi": "{{ item.2 }}",
        "maxbrUl": "{{ item.3 }}",
        "maxbrDl": "{{ item.4 }}",
        "gbrUl": "{{ item.5 }}",
        "gbrDl": "{{ item.6 }}",
        "qnc": "{{ item.7 }}",
        "reflectiveQos": "{{ item.8 }}",
        "priorityLevel": "{{ item.9 }}",
        "defQosFlowIndication": "{{ item.10 }}",
        "arp": {
            "priorityLevel": {{ item.11 }},
            "preemptCap": "{{ item.12 }}",
            "preemptVuln": "{{ item.13 }}"
                }
        }
  loop: "{{ data[0]|zip(*data[1:])|list }}"
  vars:
    data:
        -  "{{ list_pcf_qosData_Id }}"
        -  "{{ list_pcf_qosData_Name }}"
        -  "{{ list_pcf_qosData_5Qi }}"
        -  "{{ list_pcf_qosData_MaxBrUl }}"
        -  "{{ list_pcf_qosData_MaxBrDl }}"
        -  "{{ list_pcf_qosData_GbrUl }}"
        -  "{{ list_pcf_qosData_GbrDl }}"
        -  "{{ list_pcf_qosData_Qnc }}"
        -  "{{ list_pcf_qosData_ReflectiveQoS }}"
        -  "{{ list_pcf_qosData_PriorityLevel }}"
        -  "{{ list_pcf_qosData_DefQoSFlowInd }}"
        -  "{{ list_pcf_qosData_ArpPriority }}"
        -  "{{ list_pcf_qosData_ArpPreemptCap }}"
        -  "{{ list_pcf_qosData_ArpPreemptVuln }}"

- name:  create pcc rule
  copy: 
    dest: "/tmp/{{ item.0 }}_pcc_rule.json.j2"
    content: |
       {
          "pccRuleId": "{{ item.0 }}",
          "name": "{{ item.1 }}",
          "type": "{{ item.2 }}",
          "flowInfos": [
          {
            "name": "{{ item.3 }}",
            "flowDirection": "{{ item.4 }}",
            "flowDescription": "{{ item.5 }}"
          },
          {
          "name": "{{ item.6 }}",
          "flowDirection": "{{ item.7 }}",
          "flowDescription": "{{ item.8 }}"
          }
        ],
        "precedence": "{{ item.9 }}",
        "refQosData": [
        "{{ item.10 }}"
         ]
        }
  loop: "{{ data[0]|zip(*data[1:])|list }}"
  vars:
    data:
        -  "{{ list_pcf_pccRule_Id }}"
        -  "{{ list_pcf_pccRule_Name }}"
        -  "{{ list_pcf_pccRule_Type }}"
        -  "{{ list_pcf_pccRule_DLFlowName }}"
        -  "{{ list_pcf_pccRule_DLFlowDirection }}"
        -  "{{ list_pcf_pccRule_DLFlowDesc }}"
        -  "{{ list_pcf_pccRule_ULFlowName }}"
        -  "{{ list_pcf_pccRule_ULFlowDirection }}"
        -  "{{ list_pcf_pccRule_ULFlowDesc }}"
        -  "{{ list_pcf_pccRule_precedence }}"
        -  "{{ list_pcf_pccRule_refQoSData }}"

- name:  create  qos info
  copy: 
    dest: "/tmp/{{ item.0 }}_Qos_info.json.j2"
    content: |
       {
         "id": "{{ item.0 }}",
         "name": "{{ item.1 }}",
         "description": "{{ item.2 }}",
        "5qi": "{{ item.3 }}",
        "arp": {
           "priorityLevel": "{{ item.4 }}",
           "preemptCap": "{{ item.5 }}",
          "preemptVuln": "{{ item.6 }}"
        }
       }
  loop: "{{ data[0]|zip(*data[1:])|list }}"
  vars:
    data:
        -  "{{ list_pcf_qosInfo_Id }}"
        -  "{{ list_pcf_qosInfo_name }}"
        -  "{{ list_pcf_qosInfo_desc }}"
        -  "{{ list_pcf_qosInfo_5Qi }}"
        -  "{{ list_pcf_qosInfo_priorityLevel }}"
        -  "{{ list_pcf_qosInfo_preemptCap }}"
        -  "{{  list_pcf_qosInfo_preemptVuln }}"
        
- name:  create session info
  copy: 
    dest: "/tmp/{{ item.0 }}_session_info.json.j2"
    content: |
       {
         "sessRuleId": "{{ item.0 }}",
         "name": "{{ item.1 }}",
         "authSessAmbr": {
          "uplink": "{{ item.2 }}",
            "downlink": "{{ item.3 }}"
          },
          "authDefQosId": "{{ item.4 }}"
         }
  loop: "{{ data[0]|zip(*data[1:])|list }}"
  vars:
    data:
        -  "{{ list_pcf_sessionRule_Id}}"
        -  "{{ list_pcf_sessionRule_Name}}"
        -  "{{ list_pcf_sessionRule_Ambr_Ul }}"
        -  "{{ list_pcf_sessionRule_Ambr_Dl }}"
        -  "{{ list_pcf_sessionRule_QosId }}"
        
- name: generate policy table
  copy: 
    dest: "/tmp/policy_table.json.j2"
    content: |
       {
          "SST": "{{ pcf_policyTable_sst }}",
          "SD": "{{ pcf_policyTable_sd }}",
          "dnn": "{{ pcf_policyTable_dnn }}",
          "Rate-plans": "{{ pcf_policyTable_ratePlan }}",
          "SessionRule": "{{ pcf_policyTable_sessionRule }}",
          "PccRuleList": [
            "{{ pcf_policyTable_pccRuleList }}"
          ]
        }

# - name: generate SB json and copy it to utility server
#   template:
#     src: oracle_provisioning_charging_data_request.json.j2
#     dest: /tmp/oracle_provisioning_charging_data_request.json

# - name: Create Charging Data
#   uri:
#     url:  "http://pcf-stub-alm.dish-roks-poc-f5ae0bb7881b3b49feaa20ca32bad577-0000.us-south.containers.appdomain.cloud:32191/oc-cnpolicyconfiguration/v1/policydata/list_pcfsm/chargingdata"
#     method: POST
#     body: "{{lookup('template', 'oracle_provisioning_charging_data_request.json.j2')}}"
#     status_code: 200
#     body_format: json
#     headers:
#       content-type: "application/json"
#       cache-control: "no-cache"
#     return_content: yes
#   register: result





# - name: generate SB json and copy it to utility server
#   template:
#     src: oracle_provisioning_qos_data_request.json.j2
#     dest: /tmp/oracle_provisioning_qos_data_request.json


- name: Create QoS Data
  uri:
    url: "http://acb9412dc15104e988c43d6afeac6124-986749247.us-east-2.elb.amazonaws.com/pcfStub/oc-cnpolicyconfiguration/v1/policydata/pcfsm/qosdata"
    method: POST
    body: "{{lookup('template', '/tmp/{{ item }}_Qos_data.json.j2')}}"
    status_code: 200
    body_format: json
    headers:
      content-type: "application/json"
      cache-control: "no-cache"
    return_content: yes
  loop: "{{ list_pcf_qosData_Id }}"
  register: shubham

- debug:
    var: shubham

  
# - name: generate SB json and copy it to utility server
#   template:
#     src: oracle_provisioning_pcc_rule_request.json.j2
#     dest: /tmp/oracle_provisioning_pcc_rule_request.json      


- name: Create a PCC Rule
  uri:
    url:  "http://acb9412dc15104e988c43d6afeac6124-986749247.us-east-2.elb.amazonaws.com/pcfStub/oc-cnpolicyconfiguration/v1/policydata/pcfsm/pccrules"
    method: POST
    body: "{{lookup('template', '/tmp/{{ item }}_pcc_rule.json.j2')}}"
    status_code: 200
    body_format: json
    headers:
      content-type: "application/json"
      cache-control: "no-cache"
    return_content: yes
  loop: "{{ list_pcf_pccRule_Id }}"
  register: result
  
# - name: generate SB json and copy it to utility server
#   template:
#     src: oracle_provisioning_qos_information_request.json.j2
#     dest: /tmp/oracle_provisioning_qos_information_request.json

- name: Create QoS Information
  uri:
    url:  "http://acb9412dc15104e988c43d6afeac6124-986749247.us-east-2.elb.amazonaws.com/pcfStub/oc-cnpolicyconfiguration/v1/policydata/pcfsm/qosinformation"
    method: POST
    body: "{{lookup('template', '/tmp/{{ item }}_Qos_info.json.j2')}}"
    status_code: 200
    body_format: json
    headers:
      content-type: "application/json"
      cache-control: "no-cache"
    return_content: yes
  loop: "{{ list_pcf_qosInfo_Id }}"
  register: result

# - name: generate SB json and copy it to utility server
#   template:
#     src: oracle_provisioning_session_rule_request.json.j2
#     dest: /tmp/oracle_provisioning_session_rule_request.json  

- name: Create Session Rule
  uri:
    url:  "http://acb9412dc15104e988c43d6afeac6124-986749247.us-east-2.elb.amazonaws.com/pcfStub/oc-cnpolicyconfiguration/v1/policydata/pcfsm/sessionrules"
    method: POST
    body: "{{lookup('template', '/tmp/{{ item }}_session_info.json.j2')}}"
    status_code: 200
    body_format: json
    headers:
      content-type: "application/json"
      cache-control: "no-cache"
    return_content: yes
  loop: "{{ list_pcf_sessionRule_Id}}"
  register: result

# - name: generate SB json and copy it to utility server
#   template:
#     src: oracle_provisioning_update_policy_request.json.j2
#     dest: /tmp/oracle_provisioning_update_policy_request.json  
      
- name: Update the Policy Tables with the new Slice info
  uri:
    url:  "http://acb9412dc15104e988c43d6afeac6124-986749247.us-east-2.elb.amazonaws.com/pcfStub/oc-cnpolicyconfiguration/v1/policydata/common/policytables/import"
    method: POST
    body: "{{lookup('template', '/tmp/policy_table.json.j2')}}"
    status_code: 200
    body_format: json
    headers:
      content-type: "application/json"
      cache-control: "no-cache"
    return_content: yes
  register: result
  

# - name: fail instance if there is a failure from SBI
#   fail:
#     msg: Instance creation failed with error code {{ result.json.errorcode }} and error message {{ result.json.errormessage }}
#   failed_when: result.json.result != "200" 