- shell: "python3 test.py"
  register: start_time

- name: Creates directory
  file:
    path: /tmp/ansible_log
    state: directory
    mode: 0775

- name: Get token from kami
  uri:
    method: POST
    url: "{{ ansible_env.KAMI_ADA_HOST }}/KamiCore/oauth/token?grant_type=client_credentials"
    headers: 
       content-type: "application/json"
       Authorization: Basic ZGlzaDpkaXNoMTIzNA==
    validate_certs: no
  register: token  
           
- name: Get order id
  uri:
    method: GET
    url: "{{ ansible_env.KAMI_ADA_HOST }}/KamiCore/getExtOrderId"  
    return_content: yes
    body_format: json
    status_code: 201
    body: "{ \"almInstanceName\": \"{{ instance_name }}\" }"
    headers:
       ReturnResultType: "FULL"
       Authorization: Bearer {{ token.json.access_token }}
    validate_certs: no
    follow_redirects: yes
  register: kami_response

- name: setting filename
  set_fact:
    filename: /tmp/ansible_log/ansible_{{ kami_response.json.extOrderId }}_{{ ansible_date_time.iso8601 }}.log
    listrequestedServices: "{{ requestedServices.split(',') | map('trim') |  list }}"    

- name: Call RestAPI of SPML Adapter
  uri:
    url:  "{{ ansible_env.PGW_ADA_HOST }}/dish/ProvSpml/api/v1/spmlAdapter/modifyRemoveRequest"
    method: POST
    body: "{{lookup('template', 'bundle_cease.json.j2')}}"
    body_format: json
#    timeout: 2
    headers:
      content-type: "application/json"
      ReturnResultType: "FULL"
  retries: "{{ ansible_env.RETRY_COUNT }}"
  delay: "{{ ansible_env.RETRY_INTERVAL }}"
  register: result
  ignore_errors: yes

- name: Check that url returns a status_code 200 and fail if status_code 200 is not returns
  fail:
    msg: Instance creation failed with error code {{ result.status }} and error message {{ result.json.error.message }}
  when:  result.status!=200 and result.json is defined

- name: Check that url returns a status_code 200 and fail if status_code 200 is not returns
  fail:
    msg: Instance creation failed with error code {{ result.status }} and error message {{ result.msg }}
  when: result.status != 200

- shell: "python3 test.py"
  register: end_time
  no_log: True

- shell: "python3 diff.py '{{ end_time.stdout }}' '{{ start_time.stdout }}'"
  register: time_diff
  no_log: True

- name: generate SB json and copy       
  copy:
    dest: "{{ filename }}"
    content: |
       ***********************************
       start_time:  {{ start_time.stdout }}
       end_time:  {{ end_time.stdout }}
       time_taken:  {{ time_diff.stdout }}
       ***********************************
       order_send:  {{lookup('template', 'bundle_cease.json.j2')}}
       ____________________________________________________
       result_return: {{ result.json }}

- name: fail instance if there is a failure from SBI
  fail:
    msg: Instance creation failed with error code {{ result.json.output.errorcode }} and error message {{ result.json.output.message }}
  when: result.json.output.result == "Failure"
