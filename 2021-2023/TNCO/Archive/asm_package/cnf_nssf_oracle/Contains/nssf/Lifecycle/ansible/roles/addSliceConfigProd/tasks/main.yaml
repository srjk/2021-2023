# convert ALM properties to json cease request for South Bound endpoint - Nokia Provisioning GW
- name: Create the list
  set_fact:
    list_nssf_amfRegionId: "{{ nssf_amfRegionId.split(',') | map('trim')| list }}"
    list_nssf_amfSetId: "{{ nssf_amfSetId.split(',') | map('trim')| list }}"
    list_nssf_amfFqdn: "{{ nssf_amfFqdn.split(',') | map('trim')| list }}"
    list_nssf_defaultGrantName: "{{ nssf_defaultGrantName.split(',') | map('trim')| list }}"
    list_nssf_tai: "{{ nssf_tai.split(',') | map('trim') | list }}"
    list_nssf_nssRuleName: "{{ nssf_nssRuleName.split(',') | map('trim') | list }}"

- name: Creates directory
  file:
    path: /tmp/ansible_log
    state: directory
    mode: 0775

- name: setting filename
  set_fact:
    filename: /tmp/ansible_log/ansible_{{ ansible_date_time.iso8601 }}.log
- shell: "python3 test.py"
  register: start_time
  no_log: True

- name: generate SB json and copy       
  copy:
    dest: "{{ filename }}"
    content: |
       ***********************************
       start_time:  {{ start_time.stdout }}

- name: populate combined var
  set_fact:
    combined_var: "{{ combined_var|default([]) +[{ 'regionId': item.0, 'setId': item.1, 'salience': '0' }] }}"
  loop: "{{ data[0]|zip(*data[1:])|list }}"
  vars:
    data:
        -  "{{ list_nssf_amfRegionId }}"
        -  "{{ list_nssf_amfSetId }}"
        # -  "{{ list_nssf_amfFqdn }}"

- name: generate new file NSI profile
  copy: 
    dest: "/tmp/nsiprofiles_request.json.j2"
    content: |
       {
          "name": "{{ nssf_nsiProfileName }}",
          "plmn":{
              "mcc":"{{ nssf_mcc }}",
               "mnc":"{{ nssf_mnc }}"
              },
          "nrfUri": "{{ nssf_nrfUri }}", 
          "nsiId": "{{ nssf_nsiId }}",
          "nrfNfMgtUri": "{{ nssf_nrfMgtUri }}",
          "nrfAccessTokenUri": "{{ nssf_nrfAccessTokenUri }}",
          "targetAmfSets": {{ combined_var }}
          }

- name:  create nssaiauth_request
  copy: 
    dest: "/tmp/{{ item.0 }}_nssaiauth_request.json.j2"
    content: |
       {
          "name": "{{ item.0 }}",
          "plmnId":{
              "mcc":"{{ nssf_mcc }}",
               "mnc":"{{ nssf_mnc }}"
              },
           "tac":"{{ item.1 }}",
           "snssai":{
               "sst":"{{ nssf_sst }}",
                 "sd":"{{ nssf_sd }}"
              },
                 "grant":"{{ nssf_grant }}"
         }
  loop: "{{ data[0]|zip(*data[1:])|list }}"
  vars:
    data:
        -  "{{ list_nssf_defaultGrantName }}"
        -  "{{ list_nssf_tai }}"

- name:  create nssaiauth_request
  copy: 
    dest: "/tmp/{{ item }}_configuredsnssais_request.json.j2"
    content: |
       {    "amfId": "12345678-abcd-efAB-CDEF-123456789012",
            "plmn":{
             "mcc":"{{ nssf_mcc }}",
             "mnc":"{{ nssf_mnc }}"
           },
            "tac":"{{ item }}",
           "salience": "0",
           "nssai":[
              {
               "sst":"{{ nssf_sst }}",
                  "sd":"{{ nssf_sd }}"
               }
                ]
         }
  loop: "{{ list_nssf_tai }}"

- name: getting value 
  shell: "curl --location --request GET '{{ NSSF_HOST }}/nnssf-configuration/v1/nsiprofiles' --http2-prior-knowledge"
  register: result

- shell: "curl --location --http2-prior-knowledge --request  POST '{{ NSSF_HOST }}/nnssf-configuration/v1/nsiprofiles' --header 'Accept: application/json' --header 'Content-Type: application/json' -d@/tmp/nsiprofiles_request.json.j2"
  when: "'No Nsi-Profile configured'  in result.stdout"

- shell: "curl --location --request GET '{{ NSSF_HOST }}/nnssf-configuration/v1/nsiprofiles' --http2-prior-knowledge"
  register: result
 

- name: testing1
  set_fact:
    type_data: "{{ result.stdout | trim | from_json }}" 
    jmsquary: "[?plmn.mcc=='313'].{name: name , nsiId: nsiId, mcc: plmn.mcc, mnc: plmn.mnc }"
    quary1: "[?mnc=='340'].{name: name , nsiId: nsiId}"
    quary2: "[?nsiId=='{{ nssf_nsiId }}'].{name: name}"

- name: finding value 
  set_fact:
    nsi_name: "{{ type_data | json_query(jmsquary) | json_query(quary1) | json_query(quary2) }}"

# - name: Configure NSI profile
#   shell: "curl --location --request POST 'http://10.223.195.14/nnssf-configuration/v1/nsiprofiles' --header 'Accept: application/json' --header 'Content-Type: application/json' -d@/tmp/nsiprofiles_request.json.j2"
#   register: result_profile

- name: Configure NSI auth
  shell: "curl --location --request POST '{{ NSSF_HOST }}/nnssf-configuration/v1/nssaiauth' --http2-prior-knowledge --header 'Accept: application/json' --header 'Content-Type: application/json' -d@/tmp/{{ item }}_nssaiauth_request.json.j2"
  loop: "{{ list_nssf_defaultGrantName }}"
  register: result_profile

- include: mytask.yaml
  vars:
    myvar: "{{ item }}"
    mcc: "{{ nssf_mcc }}"
    mnc: "{{ nssf_mnc }}"
    amfid: "12345678-abcd-efAB-CDEF-123456789012"
    sd: "{{ nssf_sd  }}"
    sst: "{{ nssf_sst }}"
  loop: "{{ list_nssf_tai }}"
  register: result_profile

# - name: Configure snssais
#   shell: "curl --location --request POST 'http://10.223.195.14/nnssf-configuration/v1/configuredsnssais' --header 'Accept: application/json' --header 'Content-Type: application/json' -d@/tmp/{{ item }}_configuredsnssais_request.json.j2"
#   loop: "{{ list_nssf_tai }}"
#   register: result_profile

# - name: Configure NSI profile
#   shell: "curl --location --request POST 'http://10.223.195.14/nnssf-configuration/v1/amfset' --header 'Accept: application/json' --header 'Content-Type: application/json' -d@nokia_provisioning_amfsets_request.json.j2"
#   register: result_profile

# - name: Configure NSI profile
#   shell: "curl --location --request POST 'http://10.223.195.14/nnssf-configuration/v1/amfresolutions' --header 'Accept: application/json' --header 'Content-Type: application/json' -d@nokia_provisioning_amfresolutions_request.json.j2"
#   register: result_profile  
- name:  create nssisrule_request
  copy: 
    dest: "/tmp/{{ item.0 }}_nssrules_request.json.j2"
    content: |
       {
         "name":"{{ item.0 }}",
         "amfId": "12345678-abcd-efAB-CDEF-123456789012",
         "plmnId":{
         "mcc": "{{ nssf_mcc }}",
         "mnc": "{{ nssf_mnc }}"
          },
         "tac":"{{ item.1 }}",
         "snssai":{
           "sst":"{{ nssf_sst }}",
          "sd":"{{ nssf_sd }}"
           },
          "salience": "0",
          "behavior":{
            "accessType":"{{ nssf_nssRuleAccessType }}",
              "nsiProfiles":[
                  {
              "name":"{{ nsi_name[0].name }}",
              "salience": 0
            }
          ]
          }
             }
  loop: "{{ datai[0]|zip(*datai[1:])|list }}"
  vars:
    datai:
        -  "{{ list_nssf_nssRuleName }}"
        -  "{{ list_nssf_tai }}"

- name: Configure NSI profile
  shell: "curl --location --request POST '{{ NSSF_HOST }}/nnssf-configuration/v1/nssrules' --http2-prior-knowledge --header 'Accept: application/json' --header 'Content-Type: application/json' -d@/tmp/{{ item }}_nssrules_request.json.j2"
  loop: "{{ list_nssf_nssRuleName }}"
  register: result_profile

- shell: "python3 test.py"
  register: end_time
  no_log: True

- shell: "python3 diff.py '{{ end_time.stdout }}' '{{ start_time.stdout }}'"
  register: time_diff

- name: Insert a line at the end of a file.
  lineinfile:
    path: "{{ filename }}"
    line: |
           end_time:  {{ end_time.stdout }}
           time_taken:  {{ time_diff.stdout }}