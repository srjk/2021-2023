#-----------------------> Start time from system  <----------------------------
- name: "##ALM## Get timestamp from the system"
  shell: "date +%Y-%m-%d%H:%M:%S.%5N"
  register: stime


# Send Command to South Bound endpoint - Nokia SMF
- name: Create the list
  set_fact:   
    list_smf_dnnName: "{{ smf_dnnName.split(',') | map('trim')| list }}" 
    list_smfSlice_sliceListName: "{{ smfSlice_sliceListName.split(',') | map('trim')| list }}"

- name: Creates directory
  file:
    path: /tmp/ansible_log
    state: directory
    mode: 0775

- name: setting filename
  set_fact:
    filename: "/tmp/ansible_log/{{ instance_name }}_Create_SMF.log"
- shell: "python3 test.py"
  register: start_time
  no_log: True

- name: "Check if /home/ald/.ssh/known_hosts path exists"
  stat:
    path: "/home/ald/.ssh/known_hosts"
  register: known_hosts

- shell: "ssh-keygen -R {{ SMF_IP }}"
  when: known_hosts.stat.exists

# - name: generate SB json and copy it to utility server
#   copy:
#     dest: "smf_create.sh"
#     content: |
#       #!/usr/bin/expect
#       spawn ssh -o HostKeyAlgorithms=+ssh-dss -o StrictHostKeyChecking=no {{ SMF_USER }}@{{ SMF_IP }} -p {{ SMF_PORT }}
#       expect "password: "
#       send "{{ deployment_location.properties.SMF_PASS }}\r"
#       expect eof 

- name: generate SB json and copy it to utility server
  copy:
    dest: "smf_create.sh"
    content: |
      #!/usr/bin/expect
      spawn sshpass -e ssh -o HostKeyAlgorithms=+ssh-dss -o StrictHostKeyChecking=no {{ SMF_USER }}@{{ SMF_IP }} -p {{ SMF_PORT }}
      expect eof 


- name: Insert a line at the end of a file.
  lineinfile:
    path: "smf_create.sh"
    line: |             
            expect -re "{{ SMF_terminal }}" { send "configure mobile-gateway profile list slice-list {{ item }} slice {{ smfSlice_sliceName }} sst {{ smfSlice_sst }} sd {{ smfSlice_sd }} \r" } 
            expect -re "{{ SMF_terminal }}" { send "exit \r" } 
  loop: "{{ list_smfSlice_sliceListName }}"

- name: Insert a line at the end of a file.
  lineinfile:
    path: "smf_create.sh"
    line: |
            expect -re "{{ SMF_terminal }}" { send "configure mobile-gateway pdn 1 instance-type control \r" }
            
- name: Insert a line at the end of a file.
  lineinfile:
    path: "smf_create.sh"
    line: |
       expect -re "{{ SMF_terminal }}" { send "configure mobile-gateway pdn 1 apn {{ item }} slices slice-list SliceList_internet_ota\r" }
       
  loop: [ internet,ota ]
  when: "'internet' in list_smf_dnnName"

- name: Insert a line at the end of a file.
  lineinfile:
    path: "smf_create.sh"
    line: |
       expect -re "{{ SMF_terminal }}" { send "configure mobile-gateway pdn 1 apn {{ item }} slices slice-list SliceList_ims_sos_xcap\r" }
       
  loop: [ ims,sos,xcap ]
  when: "'ims' in list_smf_dnnName"

- name: Insert a line at the end of a file.
  lineinfile:
    path: "smf_create.sh"
    line: |
       expect -re "{{ SMF_terminal }}" { send "configure mobile-gateway pdn 1 apn hotspot slices slice-list SliceList_hotspot\r" }
       
  when: "'hotspot' in list_smf_dnnName"

- name: Insert a line at the end of a file.
  lineinfile:
    path: "smf_create.sh"
    line: |
       expect -re "{{ SMF_terminal }}" { send "exit all\r" }
       send "logout\r"
       expect eof

- name: running script
  command: chmod 775 smf_create.sh
- name: running script
  shell: ./smf_create.sh
  register: result
  environment: 
    SSHPASS: "{{ deployment_location.properties.SMF_PASS }}"

- shell: "python3 test.py"
  register: end_time
  no_log: True

# - debug: msg="{{ result.date  }}"

- shell: "python3 diff.py '{{ end_time.stdout }}' '{{ start_time.stdout }}'"
  register: time_diff

- name: generate SB json and copy       
  copy:
    dest: "{{ filename }}"
    content: |
       ***********************************
       start_time:  {{ start_time.stdout }}
       end_time:  {{ end_time.stdout }}
       time_taken:  {{ time_diff.stdout }}
       ***********************************
       order_send:  {{lookup('file', 'smf_create.sh')}}
       ____________________________________________________
       result_return: {{ result }}

- name: generate SB json and copy it to utility server
  copy:
    dest: "/tmp/smf_create_{{ instance_name }}.sh"
    src: "smf_create.sh"

- set_fact:
    targetper: "{{ result.stdout | regex_search('Permission denied, please try again.') }}"
- fail:
    msg: "Invalid SMF password. {{ result.stdout | regex_search('Permission denied, please try again.') }}"
  when: "targetper =='Permission denied, please try again.'"

- set_fact:
    target: "{{ result.stdout | regex_search('Error') }}"

- include_tasks: smf_delete_rollback.yml
  when: "target =='Error'"

- fail:
    msg: "{{ result.stdout | regex_search('Error.*') }}"
  when: "target =='Error'"

- name: Log API request through Log module
  ibm_cp4na_log_message:
    message_direction: sent
    external_request_id: "{{ extOrderId }}"
    content_type: application/json
    message_data: |
     ***********************************
     order_send:  
     {{lookup('template', '{{ filename }}')}}
      
     ************************************ 
    message_type: sample
    protocol: http

  
#-----------------------> End time from system  <----------------------------
- name: "##ALM## Get timestamp from the system"
  shell: "date +%Y-%m-%d%H:%M:%S.%5N"
  register: etime


#-----------------------> Store request/response Logs in Eventlogger  <----------------------------
- name: "##ALM## Store request and response in DB"
  connection: local
  uri:
    url: "{{ deployment_location.properties.eventlogger_url }}"
    method: POST
    body: "{{lookup('template', 'Store.json.j2')}}"
    return_content: yes
    body_format: json
    status_code: 200
    validate_certs: no
    headers:
      content-type: "application/json"
      ReturnResultType: "FULL" 
  register: resultStore