# Send Command to South Bound endpoint - Nokia SMF
- name: Create the list
  set_fact:   
    list_smf_dnnName: "{{ smf_dnnName.split(',') | list }}"
    list_smfSlice_sliceListName: "{{ smfSlice_sliceListName.split(',') | map('trim')| list }}"
    # list_amfSlice_dnnName: "{{ amfSlice_dnnName.split(',') | list }}" 

- name: generate SB json and copy it to utility server
  copy:
    dest: "smf_delete.sh"
    content: |
      #!/usr/bin/expect
      spawn ssh -o HostKeyAlgorithms=+ssh-dss -o StrictHostKeyChecking=no {{ SMF_USER }}@{{ SMF_IP }} -p {{ SMF_PORT }}
      expect "password: "
      send "{{ SMF_PASS }}\r"
      expect eof
               


- name: Insert a line at the end of a file.
  lineinfile:
    path: "smf_delete.sh"
    line: |
            expect -re "{{ SMF_terminal }}" { send "configure mobile-gateway profile list slice-list SliceList_internet_ota slice {{ smfSlice_sliceName }} suspend \r" }
            "MINOR: IMSI" { send "configure mobile-gateway pdn 1 apn internet slices no slice-list \r"
                            send "configure mobile-gateway pdn 1 apn ota slices no slice-list \r"
                            send "configure mobile-gateway profile list slice-list SliceList_internet_ota slice {{ smfSlice_sliceName }} suspend \r"
                          }
  when: "'internet' in list_smf_dnnName"


- name: Insert a line at the end of a file.
  lineinfile:
    path: "smf_delete.sh"
    line: |
            expect -re "{{ SMF_terminal }}" { send "configure mobile-gateway profile list slice-list SliceList_ims_sos_xcap slice {{ smfSlice_sliceName }} suspend \r" }
            "MINOR: IMSI" { send "configure mobile-gateway pdn 1 apn ims slices no slice-list \r"
                            send "configure mobile-gateway pdn 1 apn sos slices no slice-list \r"
                            send "configure mobile-gateway pdn 1 apn xcap slices no slice-list \r" 
                            send "configure mobile-gateway profile list slice-list SliceList_ims_sos_xcap slice {{ smfSlice_sliceName }} suspend \r" }
  when: "'ims' in list_smf_dnnName"


- name: Insert a line at the end of a file.
  lineinfile:
    path: "smf_delete.sh"
    line: |
            expect -re "{{ SMF_terminal }}" { send "configure mobile-gateway profile list slice-list SliceList_hotspot slice {{ smfSlice_sliceName }} suspend \r" }
             expect -re "MINOR: IMSI" { send "configure mobile-gateway pdn 1 apn hotspot slices no slice-list \r"
                            send "configure mobile-gateway profile list slice-list SliceList_hotspot slice {{ smfSlice_sliceName }} suspend \r"
                          }
  when: "'hotspot' in list_smf_dnnName"            

  

# - name: Insert a line at the end of a file.
#   lineinfile:
#     path: "smf_delete.sh"
#     line: |
#             "MINOR: IMSI" { send "configure mobile-gateway pdn 1 apn {{ item }} slices no slice-list \r" }
#   loop: "{{ list_smf_dnnName }}"

- name: Insert a line at the end of a file.
  lineinfile:
    path: "smf_delete.sh"
    line: |
            expect -re "{{ SMF_terminal }}" { send "configure mobile-gateway profile list slice-list {{ item }} no slice {{ smfSlice_sliceName }} \r" }
  loop: "{{ list_smfSlice_sliceListName }}"
       

- name: Insert a line at the end of a file.
  lineinfile:
    path: "smf_delete.sh"
    line: |
       expect -re "{{ SMF_terminal }}" { send "exit all\r" }
       send "logout\r"
       expect eof
       
- name: generate SB json and copy it to utility server
  copy:
    dest: "/tmp/smf_delete_{{ instance_name }}.sh"
    src: "smf_delete.sh"

# - name: Insert a line at the end of a file.
#   lineinfile:
#     path: "/tmp/smf_{{ instance_name }}.sh"
#     line: exit all
# - name: Insert a line at the end of a file.
  # lineinfile:
    # path: "/tmp/smf.txt"
    # line: slice-instance-list "{{ smfSlice_sliceInstanceListName}}"

#- name: shell command
#  shell: "sh /home/smf2.sh > smf_log.txt "
   #    args:
#    executable: /bin/bash

# - name: running script
#   command: chmod 775 smf_delete_{{ instance_name }}.sh
# - name: running script
#   command: ./smf_delete_{{ instance_name }}.sh
#   register: result

# - debug: var=result
