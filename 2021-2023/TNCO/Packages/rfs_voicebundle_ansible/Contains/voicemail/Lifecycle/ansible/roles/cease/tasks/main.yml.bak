#-----------------------> Start time from system  <----------------------------
- name: "##ALM##Get timestamp from the system"
  shell: "date +%Y-%m-%d%H:%M:%S.%5N"
  register: stime

#-----------------------> Print Start time  <----------------------------
- name: "##ALM##Start time"
  debug: msg="{{ stime }}"

# - name: setting filename
  # set_fact:
    # filename: /tmp/ansible_log/ansible_{{ extOrderId }}.log
    # listrequestedServices: "{{ requestedServices.split(',') | map('trim') |  list }}"

#-----------------------> Generate Token from Kami  <----------------------------
- name: "##ALM##Get token from kami"
  uri:
    method: POST
    url: "{{ deployment_location.properties.kami_url }}/KamiCore/oauth/token?grant_type=client_credentials"
    headers: 
       content-type: "application/json"
       Authorization: Basic ZGlzaDpkaXNoMTIzNA==
    validate_certs: no
  register: token  

#-----------------------> Generate Order ID from Kami  <----------------------------       
- name: "##ALM##Get order id"
  uri:
    method: GET
    url: "{{ deployment_location.properties.kami_url }}/KamiCore/getExtOrderId"  
    return_content: yes
    body_format: json
    status_code: 201
    body: "{ \"almInstanceName\": \"{{ instance_name }}\" }"
    headers:
       Returnresult_VoicePGWCeaseType: "FULL"
       Authorization: Bearer {{ token.json.access_token }}
    validate_certs: no
    follow_redirects: yes
  register: kami_response

#-----------------------> List requested services  <----------------------------
- name: "##ALM##setting filename"
  set_fact:
    # filename: /tmp/ansible_log/ansible_{{ kami_response.json.extOrderId }}.log
    listrequestedServices: "{{ kami_response.json.requestedServices.split(',') | map('trim') |  list }}"
    vmas_cease_url: "{{ deployment_location.properties.vmas_cease_url }}"     
    
# - name: Call Soap of SPML Adapter
  # uri:
    # url:  "{{ ansible_env.PGW_ADA_HOST }}/dish/ProvSpml/api/v1/spmlAdapter/modifyAddRequest"
    # url: "http://dish-network-stub-svc:8184/service"
    # url: "{{ TAS_ENUM_ADA_HOST }}/service"
    # method: POST
    # body: "{{lookup('template', 'Bundle_Voice_Cease_VoiceMail.xml.j2')}}"
    # body_format: "got:xml"
    # retry_count: "{{ ansible_env.RETRY_COUNT }}"
    # retry_interval: "{{ ansible_env.RETRY_INTERVAL }}"

#-------------------> SOAP call for Voicemail Cease operation for Primary URL <-----------------------
- name: "##VMAS##Call Soap of SPML Adapter"
  environment:
    SSL_CERT_FILE: "vmascertificate.cert"
  uri:
    url: "{{ vmas_cease_url }}"
    validate_certs: no
    # user: beuser1
    # password: mavenir
    return_content: yes
    method: POST
    body: "{{lookup('template', 'Bundle_Voice_Cease_VoiceMail.xml.j2')}}"
    #status_code: [200,201]
    headers:
      content-type: "text/xml"
      ReturnResultType: "FULL"
      SOAPAction: ""
      Authorization: Basic YmV1c2VyMTptYXZlbmly      
  register: result
  until: result.status == 200
  retries: "{{ RETRY_COUNT }}"
  delay: "{{ RETRY_INTERVAL }}"
  failed_when: "result.status not in [-1,200]"

#-----------------------> Call for VMAS Cease operation for Secondary URL <----------------------------
- name: "##ALM## Call for VMAS Cease operation for Secondary URL"
  include_tasks: second.yaml
  when: result.status == -1

#-----------------------> End time from system  <----------------------------  
- name: "##ALM##Get timestamp from the system"
  shell: "date +%Y-%m-%d%H:%M:%S.%5N"
  register: etime

#-----------------------> Print End time  <----------------------------
- name: "##ALM##end time"
  debug: msg="{{ etime }}"
  
# - name: setting filename
  # set_fact:
    # filename: /tmp/ansible_log/ansible_{{ kami_response.json.extOrderId }}_cease_voicemail.log

# - name: generate SB json and copy       
  # copy:
    # dest: "{{ filename }}"
    # content: |
       # ***********************************
       # start_time:  {{ stime.start }}
       # end_time:  {{ etime.end }}
       # ***********************************
       # order_send:  {{lookup('template', 'Bundle_Voice_Cease_VoiceMail.xml.j2')}}
       # ____________________________________________________
       # result_return: {{ result }}

- set_fact:
    target: "{{ result.content | regex_search('<ReturnCode>0</ReturnCode>') }}"

#-----------------------> Store request/response Logs in Eventlogger  <----------------------------
- name: "##ALM##Store request and response in DB"
  uri:
    url: "{{ deployment_location.properties.eventlogger_url }}"
    method: POST
    body: "{{lookup('template', 'Store.json.j2')}}"
    return_content: yes
    body_format: json
    status_code: 200
    validate_certs: no
    headers:
      content-type: "application/json"
      ReturnResultType: "FULL"
  register: resultStore

#-----------------------> Print error message for Failure case  <----------------------------

- fail:
    msg: "Instance creation failed with error code {{ result.content | regex_search('<ReturnCode>.*</ReturnCode>') | replace('<ReturnCode>','') |replace('</ReturnCode>','') }} and error message {{ result.content | regex_search('<ReturnMessage>.*</ReturnMessage>') | replace('<ReturnMessage>','') |replace('</ReturnMessage>','') }}"
  when: "target!='<ReturnCode>0</ReturnCode>'"  