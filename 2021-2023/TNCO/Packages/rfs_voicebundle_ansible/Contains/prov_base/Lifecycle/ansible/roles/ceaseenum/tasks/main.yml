# - shell: "python3 test.py"
  # register: start_time

# - name: Creates directory
  # file:
    # path: /tmp/ansible_log
    # state: directory
    # mode: 0775

# - name: setting filename
  # set_fact:
    # filename: /tmp/ansible_log/ansible_{{ extOrderId }}_{{ ansible_date_time.iso8601 }}.log
# # - shell: "python3 test.py"
  # # register: start_time
  # # no_log: True      

# - name: Get token from kami
  # uri:
    # method: POST
    # url: "{{ ansible_env.KAMI_ADA_HOST }}/KamiCore/oauth/token?grant_type=client_credentials"
    # headers: 
       # content-type: "application/json"
       # Authorization: Basic ZGlzaDpkaXNoMTIzNA==
    # validate_certs: no
  # register: token  
           
# - name: Get order id
  # uri:
    # method: GET
    # url: "{{ ansible_env.KAMI_ADA_HOST }}/KamiCore/getExtOrderId"  
    # return_content: yes
    # body_format: json
    # status_code: 201
    # body: "{ \"almInstanceName\": \"{{ instance_name }}\" }"
    # headers:
       # Returnresult_VoicePGWCeaseenumType: "FULL"
       # Authorization: Bearer {{ token.json.access_token }}
    # validate_certs: no
    # follow_redirects: yes
  # register: kami_response
  
# - name: setting filename
  # set_fact:
    # filename: /tmp/ansible_log/ansible_{{ kami_response.json.extOrderId }}_{{ ansible_date_time.iso8601 }}.log
    # listrequestedServices: "{{ requestedServices.split(',') | map('trim') |  list }}"  

#-----------------------> Start time from system  <----------------------------
- name: "##ALM##Get timestamp from the system"
  shell: "date +%Y-%m-%d%H:%M:%S.%5N"
  register: stime

#-----------------------> Print Start time  <----------------------------
- name: "##ALM##Start time"
  debug: msg="{{ stime }}"


#-----------------------> PriSet enum url  <----------------------------  

- name: "##ALM##setting filename"
  set_fact:
    enum_cease_url: "{{ deployment_location.properties.enum_cease_url }}"


#-----------------------> RestAPI call TAS/ENUM for Primary URL <----------------------------
- name: "##ENUM##Call RestAPI of SPML/TAS/ENUM Adapter"
  environment:
    SSL_CERT_FILE: "pgwcertificate.cert"
  uri:
    url: "{{ enum_cease_url }}"
    method: POST
    body: "{{lookup('template', 'nokia_provisioning_gw_enum_cease_request.xml.j2')}}"
    #status_code: [200,201]
    # body_format: json
    return_content: yes    
    headers:
      content-type: "text/xml"
      ReturnResultType: "FULL"     
  register: result
  until: result.status == 200
  retries: "{{ RETRY_COUNT }}"
  delay: "{{ RETRY_INTERVAL }}"
  failed_when: "result.status not in [-1,200]"

#-----------------------> Call for PGW Cease operation for Secondary URL <----------------------------
- name: "##ALM## Call for PGW Cease operation for Secondary URL"
  include_tasks: second.yaml
  when: result.status == -1

#-----------------------> End time from system  <----------------------------  
- name: "##ALM##Get timestamp from the system"
  shell: "date +%Y-%m-%d%H:%M:%S.%5N"
  register: etime

#-----------------------> Print End time  <----------------------------
- name: "##ALM##end time"
  debug: msg="{{ etime }}"

# - name: setting filename
  # set_fact:
    # filename: /tmp/ansible_log/ansible_{{ extOrderId }}_enum_cease_changenumber.log

# - name: generate SB json and copy       
  # copy:
    # dest: "{{ filename }}"
    # content: |
       # ***********************************
       # start_time:  {{ stime.start }}
       # end_time:  {{ etime.end }}
       # ***********************************
       # order_send:  {{lookup('template', 'nokia_provisioning_gw_enum_cease_request.xml.j2')}}
       # ____________________________________________________
       # result_return: {{ result }}

- set_fact:
    target: "{{ result.content | regex_search('error') }}"

#-----------------------> Store request/response Logs in Eventlogger  <----------------------------
- name: "##ALM##Store request and response in DB"
  uri:
    url: "{{ deployment_location.properties.eventlogger_url }}"
    method: POST
    body: "{{lookup('template', 'Store.json.j2')}}"
    return_content: yes
    body_format: json
    status_code: 200
    validate_certs: no
    headers:
      content-type: "application/json"
      ReturnResultType: "FULL"
  register: resultStore

#-----------------------> Print error message for Failure case  <----------------------------

- fail:
    msg: "Instance creation failed with error code {{ result.content | regex_search('errorCode=[^ ]+') | replace('\"','') |replace('errorCode=','') }} and error message {{ result.content | regex_search('<errorMessage>.*</errorMessage>') | replace('<errorMessage>','') |replace('</errorMessage>','') }}"
  when: "target=='error'"

 