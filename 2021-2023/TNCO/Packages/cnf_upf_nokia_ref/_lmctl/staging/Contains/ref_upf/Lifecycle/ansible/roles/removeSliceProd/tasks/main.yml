# Send Command to South Bound endpoint - Nokia SMF
- name: Create the list
  set_fact:   
    list_smf_dnnName: "{{ smf_dnnName.split(',') | map('trim') | list }}"
    list_smfSlice_sliceListName: "{{ smfSlice_sliceListName.split(',') | map('trim')| list }}"

- shell: "python3 test.py"
  register: start_time
  no_log: True
# - name: Create the list
#   set_fact:   
#     list_smfSlice_sliceListName: "{{ smfSlice_sliceListName.split(',') | map('trim')| list }}"
#   when: ""

# - name: Create the list
#   set_fact:   
#     list_smf_dnnName: "{{ smf_dnnName.split(',') | map('trim') | list }}"
#     list_smfSlice_sliceListName: "{{ smfSlice_sliceListName.split(',') | map('trim')| list }}"

    # list_amfSlice_dnnName: "{{ amfSlice_dnnName.split(',') | list }}" 

- name: generate SB json and copy it to utility server
  copy:
    dest: "smf_delete.sh"
    content: |
      #!/usr/bin/expect
      spawn ssh -o HostKeyAlgorithms=+ssh-dss-o StrictHostKeyChecking=no {{ SMF_USER }}@{{ SMF_IP }} -p {{ SMF_PORT }}
      expect "password: "
      send "{{ SMF_PASS }}\r"
      expect eof
      expect {
              "Error" { send "logout\r" }  


- name: Insert a line at the end of a file.
  lineinfile:
    path: "smf_delete.sh"
    line: |
            "{{ SMF_terminal }}" { send "configure mobile-gateway profile list slice-list SliceList_internet_ota slice {{ smfSlice_sliceName }} suspend \r" }
            "MINOR: IMSI" { send "configure mobile-gateway pdn 1 apn internet slices no slice-list \r"
                            send "configure mobile-gateway pdn 1 apn ota slices no slice-list \r"
                            send "configure mobile-gateway profile list slice-list SliceList_internet_ota slice {{ smfSlice_sliceName }} suspend \r"
                          }
  when: "'internet' in list_smf_dnnName"


- name: Insert a line at the end of a file.
  lineinfile:
    path: "smf_delete.sh"
    line: |
            "{{ SMF_terminal }}" { send "configure mobile-gateway profile list slice-list SliceList_ims_sos_xcap slice {{ smfSlice_sliceName }} suspend \r" }
            "MINOR: IMSI" { send "configure mobile-gateway pdn 1 apn ims slices no slice-list \r"
                            send "configure mobile-gateway pdn 1 apn sos slices no slice-list \r"
                            send "configure mobile-gateway pdn 1 apn xcap slices no slice-list \r" 
                            send "configure mobile-gateway profile list slice-list SliceList_ims_sos_xcap slice {{ smfSlice_sliceName }} suspend \r" }
  when: "'ims' in list_smf_dnnName"


- name: Insert a line at the end of a file.
  lineinfile:
    path: "smf_delete.sh"
    line: |
            "{{ SMF_terminal }}" { send "configure mobile-gateway profile list slice-list SliceList_hotspot slice {{ smfSlice_sliceName }} suspend \r" }
            "MINOR: IMSI" { send "configure mobile-gateway pdn 1 apn hotspot slices no slice-list \r"
                            send "configure mobile-gateway profile list slice-list SliceList_hotspot slice {{ smfSlice_sliceName }} suspend \r"
                          }
  when: "'hotspot' in list_smf_dnnName"            

  

# - name: Insert a line at the end of a file.
#   lineinfile:
#     path: "smf_delete.sh"
#     line: |
#             "MINOR: IMSI" { send "configure mobile-gateway pdn 1 apn {{ item }} slices no slice-list \r" }
#   loop: "{{ list_smf_dnnName }}"

- name: Insert a line at the end of a file.
  lineinfile:
    path: "smf_delete.sh"
    line: |
            "{{ SMF_terminal }}" { send "configure mobile-gateway profile list slice-list {{ item }} no slice {{ smfSlice_sliceName }} \r" }
  loop: "{{ list_smfSlice_sliceListName }}"

# - name: Insert a line at the end of a file.
  # lineinfile:
    # path: "smf_delete.sh"
    # line: |
            # send "configure mobile-gateway pdn 5 slices no slice-instance-list \r"
            # send "configure mobile-gateway pdn 5 slices no slice-list \r"
            # send "configure mobile-gateway pdn 5 no instance-type \r"
            # send "configure mobile-gateway profile list slice-list {{ smfSlice_sliceListName }} slice {{ smfSlice_sliceName }} suspend \r"
            # send "configure mobile-gateway profile list slice-list {{ smfSlice_sliceListName }} no slice {{ smfSlice_sliceName }} \r"
            # send "configure mobile-gateway profile list no slice-list {{ smfSlice_sliceListName }} \r"
            # send "configure mobile-gateway profile list slice-instance-list {{ smfSlice_sliceInstanceListName }} slice-instance {{ smfSlice_slice_instance }} suspend enable \r"
            # send "configure mobile-gateway profile list slice-instance-list {{ smfSlice_sliceInstanceListName }}  no slice-instance {{ smfSlice_slice_instance }} \r"
            # send "configure mobile-gateway profile list no slice-instance-list {{ smfSlice_sliceInstanceListName }} \r"

- name: Insert a line at the end of a file.
  lineinfile:
    path: "smf_delete.sh"
    line: |
       "{{ SMF_terminal }}" { send "exit all\r" }
       }
       send "logout\r"
       expect eof

- name: running script
  command: chmod 775 smf_delete.sh

- name: generate SB json and copy it to utility server
  copy:
    dest: "/tmp/smf_delete_{{ instance_name }}.sh"
    src: "smf_delete.sh"

- name: running script
  shell: ./smf_delete.sh
  register: result

- shell: "python3 test.py"
  register: end_time
  no_log: True

# - debug: msg="{{ result.date  }}"

- shell: "python3 diff.py '{{ end_time.stdout }}' '{{ start_time.stdout }}'"
  register: time_diff

- name: generate SB json and copy       
  copy:
    dest: "{{ filename }}"
    content: |
       ***********************************
       start_time:  {{ start_time.stdout }}
       end_time:  {{ end_time.stdout }}
       time_taken:  {{ time_diff.stdout }}
       ***********************************
       order_send:  {{lookup('file', 'smf_delete.sh')}}
       ____________________________________________________
       result_return: {{ result }}

# - name: generate SB json and copy it to utility server
#   copy:
#     dest: "/tmp/smf_create_{{ instance_name }}.sh"
#     src: "smf_create.sh"

- set_fact:
    target: "{{ result.stdout | regex_search('Error') }}"
- fail:
    msg: "{{ result.stdout | regex_search('Error.*') }}"
