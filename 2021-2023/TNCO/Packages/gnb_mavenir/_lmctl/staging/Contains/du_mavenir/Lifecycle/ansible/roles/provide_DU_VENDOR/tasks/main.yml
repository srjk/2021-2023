- name: Creates directory
  file:
    path: /tmp/ansible_log
    state: directory
    mode: 0775

- name: setting filename logs for Provide_DU_VENDOR
  set_fact:
    filename: /tmp/ansible_log/{{ instance_name }}_Create_DU_VENDOR_GNB_MAVENIR.log

# - name: Validate the client certificate and verify onboarding is successful or no and get apiInvokerId
  # uri:
    # # url:  "{{ ansible_env.PGW_ADA_HOST }}/dish/ProvSpml/api/v1/spmlAdapter/modifyAddRequest"
    # url: "{{ mcms_host }}/cms-service/webapi/apicore/apiinvokermanagement/v1/onboardedinvokers"
    # method: POST
    # body: "{{lookup('template', 'clientCertificate.json.j2')}}"
    # body_format: json
    # headers:
      # content-type: "application/json"
      # ReturnResultType: "FULL"
      # return_content: yes
    # validate_certs: no
  # register: clientCertificate
  # # ignore_errors: yes

# - name: clientCertificate print
  # copy:
    # dest: "/tmp/proDUVenclientCertificate.json.j2"
    # content: "{{ clientCertificate }}"

# - name: Initiate Authentication with apiInvokerId
  # uri:
    # url: "{{ mcms_host }}/cms-service/webapi/apicore/aef-security/v1/check-authentication"
    # method: POST
    # body: "{{lookup('template', 'CheckAuthentication.json.j2')}}"
    # body_format: json
    # status_code: 200
    # headers:
      # content-type: "application/json"
      # ReturnResultType: "FULL"
      # return_content: yes
    # validate_certs: no
  # register: authentication
  # # ignore_errors: yes

# - name: authentication print
  # copy:
    # dest: "/tmp/proDUVenauthentication.json.j2"
    # content: "{{ authentication }}"

# - name: Print request body for getInfoDUvendor
#   template:
#     src: getInfoDUvendor.json.j2
#     dest: /tmp/ReqBODYgetInfoDUvendor.json.j2

#----------------> DU_VENDOR retrieve nsaddInfo for each gnbCellDuVsConfig <--------------
- name: Call RestAPI to Retrieve only nsAddInfo of each gnbCellDuVsConfig
  uri:
    url: "{{ deployment_location.properties.mcms_host }}/cms-service/webapi/apiservice/ProvMnS/v1/gnbvs,gnbDuConfig={{ du_id }},gnbCellDuVsConfig,nsCfgInfo/nsAddInfo"
    method: GET
    body: "{{lookup('template', 'getInfoDUvendor.json.j2')}}"
    # body:
      # "gnbId": {{ gnb_id  | int }}
      # "cnfId": {{ du_id | int }}
      # "version": "{{ du_version }}"
      # "configType": "{{ du_vendor_config }}"
    body_format: json
    headers:
      apiInvokerId: "{{ deployment_location.properties.apiInvokerId }}"
      content-type: "application/json"
      ReturnResultType: "FULL"
      return_content: yes
    validate_certs: no
    status_code: 200
    return_content: yes
  register: GetgnbCellDuVsConfig
  ignore_errors: yes
  failed_when: "GetgnbCellDuVsConfig.status not in [200]"

# - name: retrieve only nsAddInfo for each gnbCellDuVsConfig info print
  # copy:
    # dest: "/tmp/ansible_log/resp_proDUVenGetgnbCellDuVsConfig.json.j2"
    # content: "{{ GetgnbCellDuVsConfig }}"

- name: nsAddInfo for each gnbCellDuVsConfig info print
  copy:
    dest: "{{ filename }}"
    content: |
               __________________________________________________________________________
               
               ##### GET API call to Retrieve only nsAddInfo of each gnbCellDuVsConfig
               
               URL:
               {{ GetgnbCellDuVsConfig.url }}
               
               order_send:
               {{lookup('template', 'getInfoDUvendor.json.j2')}}
               
               result_return:
               {{ GetgnbCellDuVsConfig.json | to_nice_json }}
               __________________________________________________________________________

- name: Log API request through Log module
  ibm_cp4na_log_message:
    message_direction: sent
    external_request_id: "{{ extOrderId }}"
    content_type: application/json
    message_data: |
     ***********************************
     ##### GET API call to Retrieve only nsAddInfo of each gnbCellDuVsConfig
     
     URL:
     {{ GetgnbCellDuVsConfig.url }}
     
     order_send:
     {{lookup('template', 'getInfoDUvendor.json.j2')}}
     ____________________________________________________

     result_return:
      {{ GetgnbCellDuVsConfig.json | to_nice_json }}
    message_type: sample
    protocol: http

- name: GetgnbCellDuVsConfig content result print all
  set_fact:
    target: "{{ GetgnbCellDuVsConfig.content }}"

#----------> Print error message when apiInvokerId is Invalid/incorrect/expired <------------
- name: creating variable and setting value for message error when apiInvokerId is Invalid/incorrect/expired
  set_fact:
    target_e: "{{ GetgnbCellDuVsConfig.content | regex_search('message') }}"

- fail:
    msg: "Instance creation failed with error {{ GetgnbCellDuVsConfig.content | replace('\"','') | replace('{','') | replace('}','') }}. Either apiInvokerId is Invalid/incorrect/expired, please verify the apiInvokerId."
  when: "target_e=='message'"

#----> Print error message when Invalid location or input data for: <gnbId> or <cnfId> or <version> <-------
- name: creating variable and setting value for errorInfo when wrong input data of gnbId> or <cnfId> or <version>  or any other errors
  set_fact:
    target_e1: "{{ GetgnbCellDuVsConfig.content | regex_search('error') }}"

- fail:
    msg: "Instance creation failed with error {{ GetgnbCellDuVsConfig.content | replace('\"','') | replace('{','') | replace('}','') | replace('error:','') }}"
  when: "target_e1=='error'"

#----------> DU_VENDOR retrieveAll data of gnbDuConfig Info and servedPlmnList sliceList  (lengthy response data) <------------
- name: Call RestAPI to Retrieve All data of gnbDuConfig
  uri:
    url: "{{ deployment_location.properties.mcms_host }}/cms-service/webapi/apiservice/ProvMnS/v1/gnbvs/gnbDuConfig"
    method: GET
    body: "{{lookup('template', 'getInfoDUvendor.json.j2')}}"
    # body:
      # "gnbId": {{ gnb_id  | int }}
      # "cnfId": {{ du_id | int }}
      # "version": "{{ du_version }}"
      # "configType": "{{ du_vendor_config }}"
    body_format: json
    headers:
      apiInvokerId: "{{ deployment_location.properties.apiInvokerId }}"
      content-type: "application/json"
      ReturnResultType: "FULL"
      return_content: yes
    validate_certs: no
    status_code: 200
    return_content: yes
  register: GetAllgnbDuConfig
  ignore_errors: yes
  failed_when: "GetAllgnbDuConfig.status not in [200]"

# - name: retrieveAllInfo gnbDuConfig info print
  # copy:
    # dest: "/tmp/resp_proDUVenGetAllgnbDuConfig.json.j2"
    # content: "{{ GetAllgnbDuConfig }}"

#----------> Print error message when apiInvokerId is Invalid/incorrect/expired <------------
- name: creating variable and setting value for message error when apiInvokerId is Invalid/incorrect/expired
  set_fact:
    target_e: "{{ GetAllgnbDuConfig.content | regex_search('message') }}"

- fail:
    msg: "Instance creation failed with error {{ GetAllgnbDuConfig.content | replace('\"','') | replace('{','') | replace('}','') }}. Either apiInvokerId is Invalid/incorrect/expired, please verify the apiInvokerId."
  when: "target_e=='message'"

#----> Print error message when Invalid location or input data for: <gnbId> or <cnfId> or <version> <-------
- name: creating variable and setting value for errorInfo when wrong input data of gnbId> or <cnfId> or <version>  or any other errors
  set_fact:
    target_e1: "{{ GetAllgnbDuConfig.content | regex_search('error') }}"

- fail:
    msg: "Instance creation failed with error {{ GetAllgnbDuConfig.content | replace('\"','') | replace('{','') | replace('}','') | replace('error:','') }}"
  when: "target_e1=='error'"


#-----------------------> Count of each gnbCellDuVsConfig length <------------------
# - name: gnbCellDuVsConfig count print from gnbDuConfig data
  # copy:
    # dest: "/tmp/getgnbCellDuVsConfigLen.json.j2"
    # content: "{{ GetAllgnbDuConfig.json.data[0].gnbDuConfig.gnbCellDuVsConfig|length|int -1 }}"

- name: print gnbCellDuVsConfig length
  set_fact:
    gnbCellDuVsConfigLen: "{{ GetAllgnbDuConfig.json.data[0].gnbDuConfig.gnbCellDuVsConfig|length|int -1 }}"

- name: Generate sequence for gnbCellDuVsConfig id's
  set_fact:
    mysequencegnbCellDuVsConfig: "{{ mysequencegnbCellDuVsConfig | default([]) + [GetAllgnbDuConfig.json.data[0].gnbDuConfig.gnbCellDuVsConfig[item|int].id|int] }}"
  with_sequence: start=0 end={{ gnbCellDuVsConfigLen }}

- name: print number of gnbCellDuVsConfig IDs
  debug:
    msg: "{{ mysequencegnbCellDuVsConfig }}"

#-----------------------> Count of id's for nsAddInfo "nsiId": length <------------------
# - name: nsAddInfo length count
  # copy:
    # dest: "/tmp/getnsAddInfoLen.json.j2"
    # content: "{{ GetAllgnbDuConfig.json.data[0].gnbDuConfig.gnbCellDuVsConfig|length|int -1 }}"

- name: print gnbCellDuVsConfig length
  set_fact:
    nsAddInfoLen: "{{ GetAllgnbDuConfig.json.data[0].gnbDuConfig.gnbCellDuVsConfig|length|int -1 }}"

# - name: print nsAddInfo length
  # set_fact:
    # nsAddInfoLenarray: "{{ nsAddInfoLenarray | default ([]) + [GetAllgnbDuConfig.json.data[0].gnbDuConfig.gnbCellDuVsConfig[item|int].nsCfgInfo.nsAddInfo | json_query('[?nsiId].nsiId') | max]}}"
  ## loop: "{{ mysequencegnbCellDuVsConfig }}"
  # with_sequence: start=0 end={{ nsAddInfoLen }}

- name: Identify type of nsaddInfo
  set_fact:
    type_nsadd: "{{ GetAllgnbDuConfig.json.data[0].gnbDuConfig.gnbCellDuVsConfig[item|int].nsCfgInfo.nsAddInfo | type_debug }}"
  with_sequence: start=0 end={{ nsAddInfoLen }}
 
- name: Count and print nsAddInfo length if it has a single nsiId
  set_fact:
    nsAddInfoLenarray: "{{ nsAddInfoLenarray | default ([]) + [GetAllgnbDuConfig.json.data[0].gnbDuConfig.gnbCellDuVsConfig[item|int].nsCfgInfo.nsAddInfo.nsiId ]}}"
  # loop: "{{ mysequencegnbCellDuVsConfig }}"
  with_sequence: start=0 end={{ nsAddInfoLen }}
  when: "type_nsadd == 'dict'"
  
- name: Count and print nsAddInfo length if more than 1 nsiId 
  set_fact:
    nsAddInfoLenarray: "{{ nsAddInfoLenarray | default ([]) + [GetAllgnbDuConfig.json.data[0].gnbDuConfig.gnbCellDuVsConfig[item|int].nsCfgInfo.nsAddInfo | json_query('[?nsiId].nsiId') | max] }}"
  # loop: "{{ mysequencegnbCellDuVsConfig }}"
  with_sequence: start=0 end={{ nsAddInfoLen }}
  when: "type_nsadd == 'list'"
   

- name: print number of nsAddInfo IDs
  debug:
    msg: "{{ nsAddInfoLenarray }}"

- name: Assign the id value of DU_Vendor nsAddInfo id's and same id is used for cease
  set_fact:
    idnsAddInfoDUVendor1: "{{ nsAddInfoLenarray|max +1 }}"

      #- name: Set the id value of DU_Vendor nsAddInfo id's and same id is used for cease
      #set_fact:
      #output__idnsAddInfoDUVendor: "{{ idnsAddInfoDUVendor }}"

- name: Increment to 1 from the maximum number of nsAddInfo id's
  debug:
    msg: "{{ idnsAddInfoDUVendor1 }}"

- name: Call to include Add slice for nsAddInfo for each gnbCellDuVsConfig(add new slice)
  include: updatensAddInfo.yaml
  vars:
    data:
        -  "{{ mysequencegnbCellDuVsConfig }}"
    filen: "{{ filename }}"
    gnbCellDuVsConfigId: "{{ item }}"
  loop: "{{ mysequencegnbCellDuVsConfig }}"


#---------->
#---------->
#---------->
#----------> DU_VENDOR retrieve servedPlmnList sliceList for each gnbCellDuVsConfig <-----------
- name: Call RestAPI to Retrieve only servedPlmnList sliceList for each gnbCellDuVsConfig
  uri:
    url: "{{ deployment_location.properties.mcms_host }}/cms-service/webapi/apiservice/ProvMnS/v1/gnbvs,gnbDuConfig={{ du_id }},gnbCellDuVsConfig,servedPlmnList=1/sliceList"
    method: GET
    body: "{{lookup('template', 'getInfoDUvendor.json.j2')}}"
    # body:
      # "gnbId": {{ gnb_id  | int }}
      # "cnfId": {{ du_id | int }}
      # "version": "{{ du_version }}"
      # "configType": "{{ du_vendor_config }}"
    body_format: json
    headers:
      apiInvokerId: "{{ deployment_location.properties.apiInvokerId }}"
      content-type: "application/json"
      ReturnResultType: "FULL"
      return_content: yes
    validate_certs: no
    status_code: 200
    return_content: yes
  register: GetsliceList
  ignore_errors: yes
  failed_when: "GetsliceList.status not in [200]"

# - name: retrieve only nsAddInfo for each gnbCellDuVsConfig info print
  # copy:
    # dest: "/tmp/ansible_log/resp_proDUVenGetsliceList.json.j2"
    # content: "{{ GetsliceList }}"

- name: retrieve servedPlmnList sliceList for each gnbCellDuVsConfig print
  lineinfile:
    path: "{{ filename }}"
    line: |
            __________________________________________________________________________
            
            ##### GET API call to Retrieve only servedPlmnList sliceList for each gnbCellDuVsConfig print
            
            URL:
            {{ GetsliceList.url }}
            
            order_send:
            {{lookup('template', 'getInfoDUvendor.json.j2')}}
            
            result_return:
            {{ GetsliceList.json | to_nice_json }}
            __________________________________________________________________________

- name: Log API request through Log module
  ibm_cp4na_log_message:
    message_direction: sent
    external_request_id: "{{ extOrderId }}"
    content_type: application/json
    message_data: |
     ***********************************
     ##### GET API call to Retrieve only servedPlmnList sliceList for each gnbCellDuVsConfig print
     
     URL:
     {{ GetsliceList.url }}
     
     order_send:
     {{lookup('template', 'getInfoDUvendor.json.j2')}}
     ____________________________________________________

     result_return:
      {{ GetsliceList.json | to_nice_json }}
    message_type: sample
    protocol: http

#----------> Print error message when apiInvokerId is Invalid/incorrect/expired <------------
- name: creating variable and setting value for message error when apiInvokerId is Invalid/incorrect/expired
  set_fact:
    target_e: "{{ GetsliceList.content | regex_search('message') }}"

- fail:
    msg: "Instance creation failed with error {{ GetsliceList.content | replace('\"','') | replace('{','') | replace('}','') }}. Either apiInvokerId is Invalid/incorrect/expired, please verify the apiInvokerId."
  when: "target_e=='message'"

#----> Print error message when Invalid location or input data for: <gnbId> or <cnfId> or <version> <-------
- name: creating variable and setting value for errorInfo when wrong input data of gnbId> or <cnfId> or <version>  or any other errors
  set_fact:
    target_e1: "{{ GetsliceList.content | regex_search('error') }}"

- fail:
    msg: "Instance creation failed with error {{ GetsliceList.content | replace('\"','') | replace('{','') | replace('}','') | replace('error:','') }}"
  when: "target_e1=='error'"

#----------> DU_VENDOR retrieveAll data of gnbDuConfig Info and servedPlmnList sliceList  (lengthy response data) <------------
- name: Call RestAPI to Retrieve All data of gnbDuConfig
  uri:
    url: "{{ deployment_location.properties.mcms_host }}/cms-service/webapi/apiservice/ProvMnS/v1/gnbvs/gnbDuConfig"
    method: GET
    body: "{{lookup('template', 'getInfoDUvendor.json.j2')}}"
    # body:
      # "gnbId": {{ gnb_id  | int }}
      # "cnfId": {{ du_id | int }}
      # "version": "{{ du_version }}"
      # "configType": "{{ du_vendor_config }}"
    body_format: json
    headers:
      apiInvokerId: "{{ deployment_location.properties.apiInvokerId }}"
      content-type: "application/json"
      ReturnResultType: "FULL"
      return_content: yes
    validate_certs: no
    status_code: 200
    return_content: yes
  register: GetAllgnbDuConfigsliceList
  ignore_errors: yes
  failed_when: "GetAllgnbDuConfigsliceList.status not in [200]"

# - name: retrieveAllInfo gnbDuConfig info print
  # copy:
    # dest: "/tmp/resp_proDUVenGetAllgnbDuConfigsliceList.json.j2"
    # content: "{{ GetAllgnbDuConfigsliceList }}"

#----------> Print error message when apiInvokerId is Invalid/incorrect/expired <------------
- name: creating variable and setting value for message error when apiInvokerId is Invalid/incorrect/expired
  set_fact:
    target_e: "{{ GetAllgnbDuConfigsliceList.content | regex_search('message') }}"

- fail:
    msg: "Instance creation failed with error {{ GetAllgnbDuConfigsliceList.content | replace('\"','') | replace('{','') | replace('}','') }}. Either apiInvokerId is Invalid/incorrect/expired, please verify the apiInvokerId."
  when: "target_e=='message'"

#----> Print error message when Invalid location or input data for: <gnbId> or <cnfId> or <version> <-------
- name: creating variable and setting value for errorInfo when wrong input data of gnbId> or <cnfId> or <version>  or any other errors
  set_fact:
    target_e1: "{{ GetAllgnbDuConfigsliceList.content | regex_search('error') }}"

- fail:
    msg: "Instance creation failed with error {{ GetAllgnbDuConfigsliceList.content | replace('\"','') | replace('{','') | replace('}','') | replace('error:','') }}"
  when: "target_e1=='error'"

#-----------------------> Count of each gnbCellDuVsConfig length for sliceList <------------------
# - name: gnbCellDuVsConfig count print from gnbDuConfig data for sliceList
  # copy:
    # dest: "/tmp/getgnbCellDuVsConfigLenSliceList.json.j2"
    # content: "{{ GetAllgnbDuConfigsliceList.json.data[0].gnbDuConfig.gnbCellDuVsConfig|length|int -1 }}"

- name: print gnbCellDuVsConfig length
  set_fact:
    gnbCellDuVsConfigsliceListLen: "{{ GetAllgnbDuConfigsliceList.json.data[0].gnbDuConfig.gnbCellDuVsConfig|length|int -1 }}"

- name: Generate sequence for gnbCellDuVsConfig id's
  set_fact:
    mysequencegnbCellDuVsConfigsliceList: "{{ mysequencegnbCellDuVsConfigsliceList | default([]) + [GetAllgnbDuConfigsliceList.json.data[0].gnbDuConfig.gnbCellDuVsConfig[item|int].id|int] }}"
  with_sequence: start=0 end={{ gnbCellDuVsConfigsliceListLen }}

- name: print number of gnbCellDuVsConfig IDs
  debug:
    msg: "{{ mysequencegnbCellDuVsConfigsliceList }}"


#-----------------------> Count of id's for sliceList "sliceIndex": length <------------------
# - name: sliceList length count
  # copy:
    # dest: "/tmp/getnsAddInfoLen.json.j2"
    # content: "{{ GetAllgnbDuConfigsliceList.json.data[0].gnbDuConfig.gnbCellDuVsConfig|length|int -1 }}"

- name: print gnbCellDuVsConfig length
  set_fact:
    sliceListLen: "{{ GetAllgnbDuConfigsliceList.json.data[0].gnbDuConfig.gnbCellDuVsConfig|length|int -1 }}"

# - name: print sliceList length
  # set_fact:
    # sliceListLenarray: "{{ sliceListLenarray | default([]) + [GetAllgnbDuConfigsliceList.json.data[0].gnbDuConfig.gnbCellDuVsConfig[item|int].servedPlmnList.sliceList  | json_query('[?sliceIndex].sliceIndex') | max ]}}"
  ## loop: "{{ mysequencegnbCellDuVsConfigsliceList }}"
  # with_sequence: start=0 end={{ sliceListLen }}


- name: Identify type of servedPlmnList
  set_fact:
    type_sliceList: "{{ GetAllgnbDuConfigsliceList.json.data[0].gnbDuConfig.gnbCellDuVsConfig[item|int].servedPlmnList.sliceList | type_debug }}"
  with_sequence: start=0 end={{ sliceListLen }}

- name: Count and print sliceList length if it has a single sliceIndex
  set_fact:
    sliceListLenarray: "{{ sliceListLenarray | default ([]) + [GetAllgnbDuConfigsliceList.json.data[0].gnbDuConfig.gnbCellDuVsConfig[item|int].servedPlmnList.sliceList.sliceIndex] }}"
  # loop: "{{ mysequencegnbCellDuVsConfigsliceList }}"
  with_sequence: start=0 end={{ sliceListLen }}
  when: "type_sliceList == 'dict'"

- name: Count and print sliceList length if more than 1 sliceIndex
  set_fact:
    sliceListLenarray: "{{ sliceListLenarray | default([]) + [GetAllgnbDuConfigsliceList.json.data[0].gnbDuConfig.gnbCellDuVsConfig[item|int].servedPlmnList.sliceList | json_query('[?sliceIndex].sliceIndex') | max ]}}"
  # loop: "{{ mysequencegnbCellDuVsConfigsliceList }}"
  with_sequence: start=0 end={{ sliceListLen }}
  when: "type_sliceList == 'list'"
  

- name: print number of sliceList IDs
  debug:
    msg: "{{ sliceListLenarray }}"

- name: Assign the id value of DU_Vendor sliceList id's and same id is used for cease
  set_fact:
    idsliceListDUVendor1: "{{ sliceListLenarray|max +1 }}"

#- name: Set the id value of DU_Vendor sliceList id's and same id is used for cease
#  set_fact:
#    output__idsliceListDUVendor: "{{ idsliceListDUVendor }}"

- name: Increment to 1 from the maximum number of sliceList id's
  debug:
    msg: "{{ idsliceListDUVendor1 }}"

- name: Call to include Add new slice in sliceList for each gnbCellDuVsConfig(add new slice)
  include: updatesliceList.yaml
  vars:
    data:
        -  "{{ mysequencegnbCellDuVsConfigsliceList }}"
    filen: "{{ filename }}"
    gnbCellDuVsConfigsliceListId: "{{ item }}"
  loop: "{{ mysequencegnbCellDuVsConfigsliceList }}"