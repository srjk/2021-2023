# Send Command to South Bound endpoint - Nokia UPF
# Send Command to South Bound endpoint - Nokia UPF
- name: deletes directory
  file:
    path: /tmp/ansible_log
    state: directory
    mode: 0775

- name: setting filename
  set_fact:
    filename: "/tmp/ansible_log/{{ instance_name }}_Delete_UPF.log"

- shell: "python3 test.py"
  register: start_time
  no_log: true

- name: generate SB json and copy it to utility server
  copy:
    dest: "upf_delete.sh"
    content: |
      #!/usr/bin/expect
      spawn sshpass -e ssh -o HostKeyAlgorithms=+ssh-dss -o StrictHostKeyChecking=no {{ UPF_USER }}@{{ UPF_IP }} -p {{ UPF_PORT }}
      expect eof 

- name: Insert a line at the end of a file.
  lineinfile:
    path: "upf_delete.sh"
    line: |
            expect -re "{{ UPF_terminal }}" { send "configure mobile-gateway profile list slice-list {{ upfSlice_sliceListName }} slice {{ upfSlice_sliceName }} suspend \r" }            


- name: Insert a line at the end of a file.
  lineinfile:
    path: "upf_delete.sh"
    line: |
            expect -re "{{ UPF_terminal }}" { send "configure mobile-gateway profile list slice-list {{ upfSlice_sliceListName }} no slice {{ upfSlice_sliceName }} \r" }

- name: Insert a line at the end of a file.
  lineinfile:
    path: "upf_delete.sh"
    line: |
       expect -re "{{ UPF_terminal }}" { send "exit all\r" }
       send "logout\r"
       expect eof
- name: running script
  command: chmod 777 upf_delete.sh

- name: running script
  shell: "./upf_delete.sh"
  register: result
  environment: 
    SSHPASS: "{{ UPF_PASS }}"


- shell: "python3 test.py"
  register: end_time
  no_log: True

# - debug: msg="{{ result.date  }}"

- shell: "python3 diff.py '{{ end_time.stdout }}' '{{ start_time.stdout }}'"
  register: time_diff

- name: generate SB json and copy       
  copy:
    dest: "{{ filename }}"
    content: |
       ***********************************
       start_time:  {{ start_time.stdout }}
       end_time:  {{ end_time.stdout }}
       time_taken:  {{ time_diff.stdout }}
       ***********************************
       order_send:  {{lookup('file', 'upf_delete.sh')}}
       ____________________________________________________
       result_return: {{ result }}
       _________________________________________________


- name: Log API request through Log module
  ibm_cp4na_log_message:
    message_direction: sent
    external_request_id: "{{ extOrderId }}"
    content_type: application/json
    message_data: |
     ***********************************
     order_send:  
     {{lookup('template', '{{ filename }}')}}
      
     ************************************ 
    message_type: sample
    protocol: http


#-----------------------> Store request/response Logs in Eventlogger  <----------------------------
# - name: "##ALM## Store request and response in DB"
  # connection: local
  # uri:
    # url: "{{ deployment_location.properties.eventlogger_url }}"
    # method: POST
    # body: "{{lookup('template', 'Store.json.j2')}}"
    # return_content: yes
    # body_format: json
    # status_code: 200
    # validate_certs: no
    # headers:
      # content-type: "application/json"
      # ReturnResultType: "FULL" 
  # register: resultStore
