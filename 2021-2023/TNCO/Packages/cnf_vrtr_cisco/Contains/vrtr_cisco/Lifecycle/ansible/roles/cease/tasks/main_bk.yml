

#-----------------------> Start time from system  <----------------------------
- name: "##ALM## Get timestamp from the system"
  shell: "date +%Y-%m-%d%H:%M:%S.%5N"
  register: stime

#-----------------------> Print Start time  <----------------------------
- name: "##ALM## Start time"
  debug: msg="{{ stime }}"


#-----------------------> Generate Token from Kami  <----------------------------
- name: "##ALM## Get token from kami"
  uri:
    method: POST
    url: "{{ deployment_location.properties.kami_url }}/KamiCore/oauth/token?grant_type=client_credentials"
    headers: 
       content-type: "application/json"
       Authorization: Basic ZGlzaDpkaXNoMTIzNA==
    validate_certs: no
  register: token  
 
#-----------------------> Get order id from Kami  <----------------------------
- name: "##ALM## Get order id"
  uri:
    method: GET
    url: "{{ deployment_location.properties.kami_url }}/KamiCore/getExtOrderId"  
    return_content: yes
    body_format: json
    status_code: 201
    body: "{ \"almInstanceName\": \"{{ instance_name }}\" }"
    headers:
       ReturnResultType: "FULL"
       Authorization: Bearer {{ token.json.access_token }}
    validate_certs: no
    follow_redirects: yes
  register: kami_response

#-----------------------> GET TICKET  <----------------------------
- name: Get Ticket.
  uri:
    url: "{{ deployment_location.properties.cnc_host1 }}/crosswork/sso/v1/tickets"
    method: POST
    headers:
      content-type: "application/x-www-form-urlencoded"
      ReturnResultType: "FULL"
      return_content: yes
      Accept: text/plain
    validate_certs: no
    status_code: 201
    return_content: yes
    body:
      username: "{{ username }}"
      password: "{{ password }}"
    body_format: form-urlencoded
  register: ticket
  # ignore_errors: yes

- name: ticket print.
  debug:
    msg: "{{ ticket.location }}"

- name: Get Token.
  uri:
    url: "{{ deployment_location.properties.cnc_host1 }}/crosswork/sso/v1/tickets/{{ ticket.location | regex_search('tickets/.*') | replace('tickets/','') }}"
    method: POST
    headers:
      content-type: "application/x-www-form-urlencoded"
      ReturnResultType: "FULL"
    return_content: yes
    validate_certs: no
    status_code: 200
    body:
      service: "https://10.194.132.78:30603/app-dashboard"
    body_format: form-urlencoded
  register: token
  # ignore_errors: yes
  
  
- name: token print.
  debug:
    msg: "{{ token.content }}"
      
- name: Delete Slice
  uri:
    url: "{{ deployment_location.properties.cnc_host1 }}/crosswork/proxy/nso/restconf/data/cisco-5g-transport-cfp:transport-slice/{{ cnc_slice_type }}={{ slice_snssai }}"
    method: DELETE
    body_format: json
    status_code: 204
    headers:
      content-type: "application/yang-data+xml"
      Authorization: "Bearer {{ token.content }}"
      ReturnResultType: "FULL"
    return_content: yes
    validate_certs: no
  register: result
#  ignore_errors: yes


- name: Set Logs Filename
  set_fact:
    filename: /tmp/Cisco_Slice_Cease_{{ ansible_date_time.iso8601 }}.j2

- name: printing the logs
  copy:
    dest: "{{ filename }}"
    content: "{{ result }}"

#-----------------------> search error from result content  <-------------------------
- name: "##ALM## Print Error message"
  set_fact:
    target: "{{ result.content | regex_search('error') }}"



#-----------------------> End time from system  <----------------------------
- name: "##ALM## Get timestamp from the system"
  shell: "date +%Y-%m-%d%H:%M:%S.%5N"
  register: etime

#-----------------------> Print End time  <----------------------------
- name: "##ALM## end time"
  debug: msg="{{ etime }}"
  
  
#-----------------------> Store request/response Logs in Eventlogger  <----------------------------
- name: "##ALM## Store request and response in DB"
  uri:
    url: "{{ deployment_location.properties.eventlogger_url }}"
    method: POST
    body: "{{lookup('template', 'Store-Cease.json.j2')}}"
    return_content: yes
    body_format: json
    status_code: 200
    validate_certs: no
    headers:
      content-type: "application/json"
      ReturnResultType: "FULL"
  register: resultStore

    
#-----------------------> Print error message for Failure case  <----------------------------
- fail:
    msg: "Instance creation failed with {{ result.content | regex_search('<error-message>.*</error-message>') | replace('<error-message>','') |replace('</error-message>','') }}"
  when: "target=='error'" 