#-----------------------> Start time from system  <----------------------------
- name: "##ALM## Get timestamp from the system"
  shell: "date +%Y-%m-%d%H:%M:%S.%5N"
  register: stime

- name: setting filename
  set_fact:
    filename: /tmp/ansible_log/{{ instance_name }}_Delete_NSSF.log


- name: generate SB json and copy       
  copy:
    dest: "{{ filename }}"
    content: |
       ***********************************
       start_time:  {{ stime.stdout }}
- name: Create the list
  set_fact:
    list_nssf_defaultGrantName: "{{ nssf_defaultGrantName }}"
    list_nssf_nssRuleName: "{{ nssf_nssRuleName }}"


- name: Delete Configured NSSAIs
  uri:
    url: "{{ NSSF_HOST }}/nssfStub/nnssf-configuration/v1/configuredsnssais/{{ nssf_mcc }}:{{ nssf_mnc }}:{{ nssf_sst }}:{{ nssf_sd }}"
    method: DELETE
    status_code: 204
    headers:
      content-type: "application/json"
      cache-control: "no-cache"
    #return_content: yes
  register: resultnssi



- name: Delete network slice slection rule
  uri:
    url:  "{{ NSSF_HOST }}/nssfStub/nnssf-configuration/v1/nssrules/{{ list_nssf_nssRuleName }}"
    method: DELETE
    status_code: 204
    headers:
      content-type: "application/json"
      cache-control: "no-cache"
   # return_content: yes
  register: result


- name: Delete Default Grants
  uri:
    url: "{{ NSSF_HOST }}/nssfStub/nnssf-configuration/v1/nssaiauth/{{ list_nssf_defaultGrantName }}"
    method: DELETE
    status_code: 204
    headers:
      content-type: "application/json"
      cache-control: "no-cache"
    #return_content: yes
  register: result

- name: Delete NSI Profile
  uri:
    url: "{{ NSSF_HOST }}/nssfStub/nnssf-configuration/v1/nsiprofiles/{{ nssf_nsiProfileName }}"
    method: DELETE
    status_code: 204
    headers:
      content-type: "application/json"
      cache-control: "no-cache"
   # return_content: yes
  #loop: "{{ list_nssf_nsiProfileName }}"
  register: result


#-----------------------> End time from system  <----------------------------
- name: "##ALM## Get timestamp from the system"
  shell: "date +%Y-%m-%d%H:%M:%S.%5N"
  register: etime


#-----------------------> Generate Token from Kami  <----------------------------
- name: "##ALM## Get token from kami"
  uri:
    method: POST
    url: "{{ deployment_location.properties.kami_url }}/KamiCore/oauth/token?grant_type=client_credentials"
    headers: 
       content-type: "application/json"
       Authorization: Basic ZGlzaDpkaXNoMTIzNA==
    validate_certs: no
  register: token  
 
#-----------------------> Get order id from Kami  <----------------------------
- name: "##ALM## Get order id"
  uri:
    method: GET
    url: "{{ deployment_location.properties.kami_url }}/KamiCore/getExtOrderId"  
    return_content: yes
    body_format: json
    status_code: 201
    body: "{ \"almInstanceName\": \"{{ instance_name }}\" }"
    headers:
       ReturnResultType: "FULL"
       Authorization: Bearer {{ token.json.access_token }}
    validate_certs: no
    follow_redirects: yes
  register: kami_response


- name: Log API request through Log module
  ibm_cp4na_log_message:
    message_direction: sent
    external_request_id: "{{ kami_response.json.extOrderId }}"
    content_type: application/json
    message_data: |
     ***********************************
     order_send:  
     {{lookup('template', '{{ filename }}')}}
      
     ************************************ 
    message_type: sample
    protocol: http

#-----------------------> Store request/response Logs in Eventlogger  <----------------------------
- name: "##ALM## Store request and response in DB"
  connection: local
  uri:
    url: "{{ deployment_location.properties.eventlogger_url }}"
    method: POST
    body: "{{lookup('template', 'Store_delete.json.j2')}}"
    return_content: yes
    body_format: json
    status_code: 200
    validate_certs: no
    headers:
      content-type: "application/json"
      ReturnResultType: "FULL" 
  register: resultStore
