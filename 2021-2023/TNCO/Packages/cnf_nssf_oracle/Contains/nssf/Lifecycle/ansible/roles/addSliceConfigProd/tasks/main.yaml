#-----------------------> Start time from system  <----------------------------
- name: "##ALM## Get timestamp from the system"
  shell: "date +%Y-%m-%d%H:%M:%S.%5N"
  register: stime

# convert ALM properties to json cease request for South Bound endpoint - Nokia Provisioning GW
- name: Create the list
  set_fact:
    list_nssf_amfRegionId: "{{ nssf_amfRegionId }}"
    list_nssf_amfSetId: "{{ nssf_amfSetId }}"
    list_nssf_amfFqdn: "{{ nssf_amfFqdn }}"
    list_nssf_defaultGrantName: "{{ nssf_defaultGrantName }}"
    #list_nssf_tai: "{{ nssf_tai.split(',') | map('trim') | list }}"
    list_nssf_nssRuleName: "{{ nssf_nssRuleName }}"
    list_nssf_configurednssi: "test"

- name: Creates directory
  file:
    path: /tmp/ansible_log
    state: directory
    mode: 0775

- name: setting filename
  set_fact:
    filename: /tmp/ansible_log/{{ instance_name }}_Create_NSSF.log
- shell: "python3 test.py"
  register: start_time
  no_log: True

- name: generate SB json and copy       
  copy:
    dest: "{{ filename }}"
    content: |
       ***********************************
       start_time:  {{ start_time.stdout }}

- name: populate combined var
  set_fact:
    combined_var: "[{ 'regionId': {{ list_nssf_amfRegionId }}, 'setId': {{ list_nssf_amfSetId }}, 'salience': {{ nssf_confNssaiSalience }} }]"


# - name: populate combined var
#  set_fact:
#    combined_var: "{{ combined_var|default([]) +[{ 'regionId': item.0, 'setId': item.1, 'salience': nssf_confNssaiSalience }] }}"
#  loop: "{{ data[0]|zip(*data[1:])|list }}"

  vars:
    data:
        -  "{{ list_nssf_amfRegionId }}"
        -  "{{ list_nssf_amfSetId }}"
        # -  "{{ list_nssf_amfFqdn }}"

- name: generate new file NSI profile
  copy: 
    dest: "/tmp/nsiprofiles_request.json.j2"
    content: |
       {
          "name": "{{ nssf_nsiProfileName }}",
          "plmn":{
              "mcc":"{{ nssf_mcc }}",
               "mnc":"{{ nssf_mnc }}"
              },
          "nrfUri": "{{ nssf_nrfUri }}", 
          "nsiId": "{{ nssf_nsiId }}",
          "nrfNfMgtUri": "{{ nssf_nrfMgtUri }}",
          "nrfAccessTokenUri": "{{ nssf_nrfAccessTokenUri }}",
          "targetAmfSets": {{ combined_var }}
          }

- name:  create nssaiauth_request
  copy: 
    dest: "/tmp/{{ list_nssf_defaultGrantName }}_nssaiauth_request.json.j2"
    content: |
       {
           "name": "{{ list_nssf_defaultGrantName }}",
            "plmnId":{
                "mcc":"{{ nssf_mcc }}",
                 "mnc":"{{ nssf_mnc }}"
                },
             "snssai":{
                 "sst":"{{ nssf_sst }}",
                   "sd":"{{ nssf_sd }}"
                },
                   "grant":"ALLOWED"
         }
#  loop: "{{ list_nssf_defaultGrantName }}"
#  vars:
#    data:
#        -  "{{ list_nssf_defaultGrantName }}"
#        -  "{{ list_nssf_tai }}"

- name:   Create_Configurednssaiauth_request
  copy: 
    dest: "/tmp/{{ list_nssf_configurednssi }}_configuredsnssais_request.json.j2"
    content: |
         {
              "plmn":{
                "mcc":"{{ nssf_mcc }}",
                 "mnc":"{{ nssf_mnc }}"
             },
             "nssai":[
                {
                 "sst":"{{ nssf_sst }}",
                   "sd":"{{ nssf_sd }}"
                 }
                  ]
           }
  #loop: "{{ list_nssf_defaultGrantName }}"

- name: getting value 
  shell: "curl --location --request GET '{{ NSSF_HOST }}/nnssf-configuration/v1/nsiprofiles' --http2-prior-knowledge"
  register: result

- shell: "curl --location --http2-prior-knowledge --request  POST '{{ NSSF_HOST }}/nnssf-configuration/v1/nsiprofiles' --header 'Accept: application/json' --header 'Content-Type: application/json' -d@/tmp/nsiprofiles_request.json.j2"
  when: "'No Nsi-Profile configured'  in result.stdout"

- shell: "curl --location --request GET '{{ NSSF_HOST }}/nnssf-configuration/v1/nsiprofiles' --http2-prior-knowledge"
  register: result

- name: Log the request response of NSI Profiles
  lineinfile:
    path: "{{ filename }}"
    line: |
       ***********************************
       Get NSI Profiles:
       Request:
       curl --location --request GET '{{ NSSF_HOST }}/nnssf-configuration/v1/nsiprofiles' --http2-prior-knowledge

       Response:
       {{ result }}


- name: testing1
  set_fact:
    type_data: "{{ result.stdout | trim | from_json }}" 
    jmsquary: "[?plmn.mcc=='313'].{name: name , nsiId: nsiId, mcc: plmn.mcc, mnc: plmn.mnc }"
    quary1: "[?mnc=='340'].{name: name , nsiId: nsiId}"
    quary2: "[?nsiId=='{{ nssf_nsiId }}'].{name: name}"

- name: finding value 
  set_fact:
    nsi_name: "{{ type_data | json_query(jmsquary) | json_query(quary1) | json_query(quary2) }}"


#=========================NSSI AUTH=========================================                                                    
- name: Configure NSI auth
  shell: "curl --location --request POST '{{ NSSF_HOST }}/nnssf-configuration/v1/nssaiauth' --http2-prior-knowledge --header 'Accept: application/json' --header 'Content-Type: application/json' -d@/tmp/{{ list_nssf_defaultGrantName }}_nssaiauth_request.json.j2 -s -o response.txt -w '%{http_code}'"
#    loop: "{{ list_nssf_defaultGrantName }}"
  register: result_AUTH

- name: print the status code
  debug:
    msg: "{{result_AUTH.stdout}}"

- name: Cat the response output to a register
  command: cat response.txt
  register: response

- name: Log the request response of NSI AUTH
  lineinfile:
    path: "{{ filename }}"
    line: |
       ***********************************
       Configure NSI AUTH:
       Request:
       curl --location --request POST '{{ NSSF_HOST }}/nnssf-configuration/v1/nssaiauth' --http2-prior-knowledge --header 'Accept: application/json' --header 'Content-Type: application/json' -d@/tmp/{{ list_nssf_defaultGrantName }}_nssaiauth_request.json.j2

       Response:
       {{ response }}


- fail:
    msg: "{{ response.stdout }}"
  when: "'201' not in result_AUTH.stdout"     

    
- name:  create nssisrule_request
  copy:
    dest: "/tmp/{{ list_nssf_nssRuleName }}_nssrules_request.json.j2"
    content: |
       {
         "name":"{{ list_nssf_nssRuleName }}",
         "plmnId":{
                "mcc":"{{ nssf_mcc }}",
                 "mnc":"{{ nssf_mnc }}"
          },
         "snssai":{
           "sst":" {{ nssf_sst }}",
          "sd":"{{ nssf_sd }}"
           },
          "salience": "0",
          "behavior":{
            "accessType":"3GPP_ACCESS",
              "nsiProfiles":[
                  {
              "name":"{{ nsi_name[0].name }}",
              "salience": 0
            }
          ]
          }
             }

#============================CONFIGURE NSSI RULES==========================================

- name: Configure NSI Rules
  shell: "curl --location --request POST '{{ NSSF_HOST }}/nnssf-configuration/v1/nssrules' --http2-prior-knowledge --header 'Accept: application/json' --header 'Content-Type: application/json' -d@/tmp/{{ list_nssf_nssRuleName }}_nssrules_request.json.j2 -s -o responseNSSRules.txt -w '%{http_code}'"
#  loop: "{{ list_nssf_nssRuleName }}"
  register: result_NSSRules

- name: print the status code
  debug:
      msg: "{{ result_NSSRules.stdout }}"

- name: Cat the response output to a register
  command: cat responseNSSRules.txt
  register: response_NSSRULES

- name: Log the request response of NSS Rules
  lineinfile:
    path: "{{ filename }}"
    line: |
       ***********************************
       Configure NSS Rules:
       Request:
       curl --location --request POST '{{ NSSF_HOST }}/nnssf-configuration/v1/nssrules' --http2-prior-knowledge --header 'Accept: application/json' --header 'Content-Type: application/json' -d@/tmp/{{ list_nssf_nssRuleName }}_nssrules_request.json.j2
       
       Response:
       {{ response_NSSRULES }}


- name: DELETE NSSI Rule
  shell: "curl --location --request DELETE '{{ NSSF_HOST }}/nnssf-configuration/v1/nssrules/{{ list_nssf_nssRuleName }}'  --http2-prior-knowledge --header 'Accept: application/json' --header 'Content-Type: application/json'"
  register: result_Delete_NSSRules
  when: "'201' not in result_NSSRules.stdout"

- name: Log the request response of Delete NSS Rules for Rollback
  lineinfile:
    path: "{{ filename }}"
    line: |
       ***********************************
       Delete NSS Rules:
       Request:
       curl --location --request DELETE '{{ NSSF_HOST }}/nnssf-configuration/v1/nssrules/{{ list_nssf_nssRuleName }}'  --http2-prior-knowledge --header 'Accept: application/json' --header 'Content-Type: application/json'
       
       Response:
       {{ result_Delete_NSSRules }}
  when: "'201' not in result_NSSRules.stdout"


- name: DELETE NSSI AUTH
  shell: "curl --location --request DELETE '{{ NSSF_HOST }}/nnssf-configuration/v1/nssaiauth/{{ list_nssf_defaultGrantName }}' --http2-prior-knowledge --header 'Accept: application/json' --header 'Content-Type: application/json'"
#    loop: "{{ list_nssf_defaultGrantName }}"
  register: result_Delete_AUTH
#    when: "result_NSSRules.stdout != 201"
  when: "'201' not in result_NSSRules.stdout"


- name: Log the request response of Delete NSSI AUTH for Rollback
  lineinfile:
    path: "{{ filename }}"
    line: |
       ***********************************
       Delete NSS Rules:
       Request:
       curl --location --request DELETE '{{ NSSF_HOST }}/nnssf-configuration/v1/nssaiauth/{{ list_nssf_defaultGrantName }}' --http2-prior-knowledge --header 'Accept: application/json' --header 'Content-Type: application/json'
       
       Response:
       {{ result_Delete_AUTH }}
  when: "'201' not in result_NSSRules.stdout"



- fail:
    msg: "{{ response_NSSRULES.stdout }}"
  when: "'201' not in result_NSSRules.stdout"
    
#===============================CONFIGURESNSSAI=======================================================    
    
- include: mytask.yaml
  vars:
    myvar: "{{ list_nssf_configurednssi }}"
    mcc: "{{ nssf_mcc }}"
    mnc: "{{ nssf_mnc }}"
    sd: "{{ nssf_sd }}"
    sst: "{{ nssf_sst }}"
  #loop: "{{ list_nssf_defaultGrantName }}"
  register: result_profile

- shell: "python3 test.py"
  register: end_time
  no_log: True

- shell: "python3 diff.py '{{ end_time.stdout }}' '{{ start_time.stdout }}'"
  register: time_diff

- name: Insert a line at the end of a file.
  lineinfile:
    path: "{{ filename }}"
    line: |
           end_time:  {{ end_time.stdout }}
           time_taken:  {{ time_diff.stdout }}


- name: Log API request through Log module
  ibm_cp4na_log_message:
    message_direction: sent
    external_request_id: "{{ extOrderId }}"
    content_type: application/json
    message_data: |
     ***********************************
     order_send:  
     {{lookup('template', '{{ filename }}')}}
      
     ************************************ 
    message_type: sample
    protocol: http



#-----------------------> End time from system  <----------------------------
- name: "##ALM## Get timestamp from the system"
  shell: "date +%Y-%m-%d%H:%M:%S.%5N"
  register: etime


#-----------------------> Store request/response Logs in Eventlogger  <----------------------------
- name: "##ALM## Store request and response in DB"
  connection: local
  uri:
    url: "{{ deployment_location.properties.eventlogger_url }}"
    method: POST
    body: "{{lookup('template', 'Store.json.j2')}}"
    return_content: yes
    body_format: json
    status_code: 200
    validate_certs: no
    headers:
      content-type: "application/json"
      ReturnResultType: "FULL" 
  register: resultStore
