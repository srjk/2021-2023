- name: Creates directory
  file:
    path: /tmp/ansible_log
    state: directory
    mode: 0775

- name: setting filename logs for Provide_DU
  set_fact:
    filename: /tmp/ansible_log/{{ instance_name }}_provide_DU_GNB_SAMSUNG.log

- name: setting filename for xml parse
  set_fact:
    xmlfilename: /tmp/ansible_log/{{ instance_name }}_provide_DU_GNB_SAMSUNG.xml

#----------------> DU Slice retrieval  <--------------
- name: Call RestAPI to retrieve DU Slice ID
  uri:
    url: "{{ deployment_location.properties.samsung_usm_host }}/oss/netconf/{{ du_id }}"
    # user: ossuser
    # password: osspasswd
    method: POST
    body: "{{lookup('template', 'get_slice_du.xml')}}"
    # body_format: json
    headers:
      Authorization: Basic b3NzdXNlcjpvc3NwYXNzd2Q=
      content-type: "application/xml"
      ReturnResultType: "FULL"
      return_content: yes
    validate_certs: no
    status_code: 200
    return_content: yes
  register: DU_getSlice
  # ignore_errors: yes

- name: Display response
  debug:
    var: DU_getSlice

- name: DU_getSlice info print
  copy:
    dest: "{{ filename }}"
    content: |
              __________________________________________________________________________
              
              ##### retrieve Slice for DU_getSlice
              
              URL:
              {{ DU_getSlice.url }}
              
              order_send:
              {{lookup('template', 'get_slice_du.xml')}}
              
              result_return:
              {{ DU_getSlice.content }}
              __________________________________________________________________________

- name: Log API request through Log module
  ibm_cp4na_log_message:
    message_direction: sent
    external_request_id: "{{ extOrderId }}"
    content_type: application/json
    message_data: |
     ***********************************
     #####   retrieve Slice for DU_getSlice
     
     URL:  
     {{ DU_getSlice.url }}
     
     order_send:
     {{lookup('template', 'get_slice_du.xml')}}
     ____________________________________________________

     result_return:
      {{ DU_getSlice.content }}
    message_type: sample
    protocol: http

- name: DU_getSlice content print for xml parse
  copy:
    dest: "{{ xmlfilename }}"
    content: |
              {{ DU_getSlice.content }}

- name: Remove rpc-reply tag
  lineinfile:
    dest: "{{ xmlfilename }}"
    regexp: 'rpc-reply*'
    backup: no
    state: absent


####-------> Retrieve the slice-Index and increment the ID. Use the same ID for create Slice for DU and DUCell.
###Call when Slice ID Xpath is present (Slice-Index value already present)
### Condition works when atleast one slice is configured for DU.

- name: Read xml data to calculate the slice-index for DU when Slice ID Xpath is present (atleast one Slice-Index is configured)
  xml:
    xmlstring: "{{ lookup('file', '{{ xmlfilename }}') }}"
    namespaces:
      ns: http://www.samsung.com/global/business/5GvRAN/ns/gnbducnf
    xpath: /data/ns:managed-element/ns:gnb-du-function/ns:gnb-du-slice-info/ns:slice-index
    content: 'text'
  register: xml_result

- name: Print slice-index matches
  debug:
    var: xml_result.matches

##find length of Arrray of dict(json)
- name: Print the length of SliceIndex
  set_fact:
    sliceIndex: "{{ xml_result.matches | length }}"

##Extract last entry from array in dict(json) format
- name: Print last SliceIndex entry from array in json(dict) format (key:value pair)
  set_fact:
    SliceIdlast: "{{ xml_result.matches[sliceIndex | int -1] }}"

## Extract only key from last SliceIndex entry of array
- name: Print only key from last SliceIndex entry
  set_fact:
    SliceIdlastKeyonly: "{{ SliceIdlast.keys() }}"

## Extract First key from dict of keys
- name: Print first key from last SliceIndex entry if found multiple
  set_fact:
    SliceIdFirstKey: "{{ SliceIdlastKeyonly[0] }}"

- debug:
    msg: "{{ SliceIdFirstKey }}"

- name: Print slice-Index value of the last entry in list
  set_fact:
    sliceIndexFirstKeyvalue: "{{ SliceIdlast[SliceIdFirstKey] }}"

- name: Increment slice-Index to 1 if atleast one slice-index data is found in xml
  set_fact:
    sliceIndexvalueIncrement: "{{ sliceIndexFirstKeyvalue |int + 1 }}"

- name: Print sliceIndexvalueIncrement
  debug:
    msg: "{{ sliceIndexvalueIncrement }}"

# - name: Set slice-Index to 1 if no slice-index data is found in result output xml
  # set_fact:
    # sliceIndexvalueIncrement: 1
  # when: "sliceIndex==0"


- block:
    - name: Call when Slice ID Xpath is present (Slice-Index value already present)
      include: DU_XpathIsPresent.yaml
      vars:
        # xmlfile: "{{ xmlfilename }}"
        logsfile: "{{ filename }}"
        DU_Slice_Index: "{{ sliceIndexvalueIncrement }}"
      register: DU_XpathIsPresent

  rescue:
    - name: Call when Slice ID XPath is not present (Create First slice-Index with value 0)
      include: DU_SliceID0.yaml
      vars:
        xmlfile: "{{ xmlfilename }}"
        logsfile: "{{ filename }}"
      register: DU_SliceID0

- name: Call for DUcell configuration- Create DUCell 
  include: DUCell_config.yaml
  vars:
    xmlfile: "{{ xmlfilename }}"
    logsfile: "{{ filename }}"
    DUCellIdentity_Item: "{{ item }}"
    DUCell_Slice_Index: "{{ sliceIndexvalueIncrement }}"
  register: DUCell_config
  loop: "{{ cell_id }}"